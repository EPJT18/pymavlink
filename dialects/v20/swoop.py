'''
MAVLink protocol implementation (auto-generated by mavgen.py)

Generated from: swoop.xml

Note: this file has been auto-generated. DO NOT EDIT
'''
from __future__ import print_function
from builtins import range
from builtins import object
import struct, array, time, json, os, sys, platform

from ...generator.mavcrc import x25crc
import hashlib

WIRE_PROTOCOL_VERSION = '2.0'
DIALECT = 'swoop'

PROTOCOL_MARKER_V1 = 0xFE
PROTOCOL_MARKER_V2 = 0xFD
HEADER_LEN_V1 = 6
HEADER_LEN_V2 = 10

MAVLINK_SIGNATURE_BLOCK_LEN = 13

MAVLINK_IFLAG_SIGNED = 0x01

native_supported = platform.system() != 'Windows' # Not yet supported on other dialects
native_force = 'MAVNATIVE_FORCE' in os.environ # Will force use of native code regardless of what client app wants
native_testing = 'MAVNATIVE_TESTING' in os.environ # Will force both native and legacy code to be used and their results compared

if native_supported and float(WIRE_PROTOCOL_VERSION) <= 1:
    try:
        import mavnative
    except ImportError:
        print('ERROR LOADING MAVNATIVE - falling back to python implementation')
        native_supported = False
else:
    # mavnative isn't supported for MAVLink2 yet
    native_supported = False

# some base types from mavlink_types.h
MAVLINK_TYPE_CHAR     = 0
MAVLINK_TYPE_UINT8_T  = 1
MAVLINK_TYPE_INT8_T   = 2
MAVLINK_TYPE_UINT16_T = 3
MAVLINK_TYPE_INT16_T  = 4
MAVLINK_TYPE_UINT32_T = 5
MAVLINK_TYPE_INT32_T  = 6
MAVLINK_TYPE_UINT64_T = 7
MAVLINK_TYPE_INT64_T  = 8
MAVLINK_TYPE_FLOAT    = 9
MAVLINK_TYPE_DOUBLE   = 10


class MAVLink_header(object):
    '''MAVLink message header'''
    def __init__(self, msgId, incompat_flags=0, compat_flags=0, mlen=0, seq=0, srcSystem=0, srcComponent=0):
        self.mlen = mlen
        self.seq = seq
        self.srcSystem = srcSystem
        self.srcComponent = srcComponent
        self.msgId = msgId
        self.incompat_flags = incompat_flags
        self.compat_flags = compat_flags

    def pack(self, force_mavlink1=False):
        if WIRE_PROTOCOL_VERSION == '2.0' and not force_mavlink1:
            return struct.pack('<BBBBBBBHB', 253, self.mlen,
                               self.incompat_flags, self.compat_flags,
                               self.seq, self.srcSystem, self.srcComponent,
                               self.msgId&0xFFFF, self.msgId>>16)
        return struct.pack('<BBBBBB', PROTOCOL_MARKER_V1, self.mlen, self.seq,
                           self.srcSystem, self.srcComponent, self.msgId)

class MAVLink_message(object):
    '''base MAVLink message class'''
    def __init__(self, msgId, name):
        self._header     = MAVLink_header(msgId)
        self._payload    = None
        self._msgbuf     = None
        self._crc        = None
        self._fieldnames = []
        self._type       = name
        self._signed     = False
        self._link_id    = None

    def format_attr(self, field):
        '''override field getter'''
        raw_attr = getattr(self,field)
        if isinstance(raw_attr, bytes):
            raw_attr = raw_attr.decode("utf-8").rstrip("\00")
        return raw_attr

    def get_msgbuf(self):
        if isinstance(self._msgbuf, bytearray):
            return self._msgbuf
        return bytearray(self._msgbuf)

    def get_header(self):
        return self._header

    def get_payload(self):
        return self._payload

    def get_crc(self):
        return self._crc

    def get_fieldnames(self):
        return self._fieldnames

    def get_type(self):
        return self._type

    def get_msgId(self):
        return self._header.msgId

    def get_srcSystem(self):
        return self._header.srcSystem

    def get_srcComponent(self):
        return self._header.srcComponent

    def get_seq(self):
        return self._header.seq

    def get_signed(self):
        return self._signed

    def get_link_id(self):
        return self._link_id

    def __str__(self):
        ret = '%s {' % self._type
        for a in self._fieldnames:
            v = self.format_attr(a)
            ret += '%s : %s, ' % (a, v)
        ret = ret[0:-2] + '}'
        return ret

    def __ne__(self, other):
        return not self.__eq__(other)

    def __eq__(self, other):
        if other is None:
            return False

        if self.get_type() != other.get_type():
            return False

        # We do not compare CRC because native code doesn't provide it
        #if self.get_crc() != other.get_crc():
        #    return False

        if self.get_seq() != other.get_seq():
            return False

        if self.get_srcSystem() != other.get_srcSystem():
            return False

        if self.get_srcComponent() != other.get_srcComponent():
            return False

        for a in self._fieldnames:
            if self.format_attr(a) != other.format_attr(a):
                return False

        return True

    def to_dict(self):
        d = dict({})
        d['mavpackettype'] = self._type
        for a in self._fieldnames:
          d[a] = self.format_attr(a)
        return d

    def to_json(self):
        return json.dumps(self.to_dict())

    def sign_packet(self, mav):
        h = hashlib.new('sha256')
        self._msgbuf += struct.pack('<BQ', mav.signing.link_id, mav.signing.timestamp)[:7]
        h.update(mav.signing.secret_key)
        h.update(self._msgbuf)
        sig = h.digest()[:6]
        self._msgbuf += sig
        mav.signing.timestamp += 1

    def pack(self, mav, crc_extra, payload, force_mavlink1=False):
        plen = len(payload)
        if WIRE_PROTOCOL_VERSION != '1.0' and not force_mavlink1:
            # in MAVLink2 we can strip trailing zeros off payloads. This allows for simple
            # variable length arrays and smaller packets
            nullbyte = chr(0)
            # in Python2, type("fred') is str but also type("fred")==bytes
            if str(type(payload)) == "<class 'bytes'>":
                nullbyte = 0
            while plen > 1 and payload[plen-1] == nullbyte:
                plen -= 1
        self._payload = payload[:plen]
        incompat_flags = 0
        if mav.signing.sign_outgoing:
            incompat_flags |= MAVLINK_IFLAG_SIGNED
        self._header  = MAVLink_header(self._header.msgId,
                                       incompat_flags=incompat_flags, compat_flags=0,
                                       mlen=len(self._payload), seq=mav.seq,
                                       srcSystem=mav.srcSystem, srcComponent=mav.srcComponent)
        self._msgbuf = self._header.pack(force_mavlink1=force_mavlink1) + self._payload
        crc = x25crc(self._msgbuf[1:])
        if True: # using CRC extra
            crc.accumulate_str(struct.pack('B', crc_extra))
        self._crc = crc.crc
        self._msgbuf += struct.pack('<H', self._crc)
        if mav.signing.sign_outgoing and not force_mavlink1:
            self.sign_packet(mav)
        return self._msgbuf


# enums

class EnumEntry(object):
    def __init__(self, name, description):
        self.name = name
        self.description = description
        self.param = {}

enums = {}

# SWOOP_ARMING_CHECKS_PASSED
enums['SWOOP_ARMING_CHECKS_PASSED'] = {}
READY_TO_ARM = 0 # 
enums['SWOOP_ARMING_CHECKS_PASSED'][0] = EnumEntry('READY_TO_ARM', '''''')
ARMING_CHECK_FAILED = 1 # 
enums['SWOOP_ARMING_CHECKS_PASSED'][1] = EnumEntry('ARMING_CHECK_FAILED', '''''')
SWOOP_ARMING_CHECKS_PASSED_ENUM_END = 2 # 
enums['SWOOP_ARMING_CHECKS_PASSED'][2] = EnumEntry('SWOOP_ARMING_CHECKS_PASSED_ENUM_END', '''''')

# SWOOP_BATTERY_HEALTH
enums['SWOOP_BATTERY_HEALTH'] = {}
BATTERY_NOT_HEATLHY = 0 # 
enums['SWOOP_BATTERY_HEALTH'][0] = EnumEntry('BATTERY_NOT_HEATLHY', '''''')
BATTERY_HEALTHY = 1 # 
enums['SWOOP_BATTERY_HEALTH'][1] = EnumEntry('BATTERY_HEALTHY', '''''')
SWOOP_BATTERY_HEALTH_ENUM_END = 2 # 
enums['SWOOP_BATTERY_HEALTH'][2] = EnumEntry('SWOOP_BATTERY_HEALTH_ENUM_END', '''''')

# SWOOP_ARMING_CHECK_DETAIL_1
enums['SWOOP_ARMING_CHECK_DETAIL_1'] = {}
SAFETY_SWITCH_DISSABLED = 1 # 
enums['SWOOP_ARMING_CHECK_DETAIL_1'][1] = EnumEntry('SAFETY_SWITCH_DISSABLED', '''''')
BAROMETER_NOT_HEALTHY = 2 # 
enums['SWOOP_ARMING_CHECK_DETAIL_1'][2] = EnumEntry('BAROMETER_NOT_HEALTHY', '''''')
CAN_BUS_NOT_HEALTHY = 4 # 
enums['SWOOP_ARMING_CHECK_DETAIL_1'][4] = EnumEntry('CAN_BUS_NOT_HEALTHY', '''''')
GYRO_NOT_CALIBRATED = 8 # 
enums['SWOOP_ARMING_CHECK_DETAIL_1'][8] = EnumEntry('GYRO_NOT_CALIBRATED', '''''')
GYROS_INCONSISTENT = 16 # 
enums['SWOOP_ARMING_CHECK_DETAIL_1'][16] = EnumEntry('GYROS_INCONSISTENT', '''''')
PROXIMITY_ERROR = 32 # 
enums['SWOOP_ARMING_CHECK_DETAIL_1'][32] = EnumEntry('PROXIMITY_ERROR', '''''')
ACCELS_NOT_CALIBRATED = 64 # 
enums['SWOOP_ARMING_CHECK_DETAIL_1'][64] = EnumEntry('ACCELS_NOT_CALIBRATED', '''''')
ACCELS_INCONSISTENT = 128 # 
enums['SWOOP_ARMING_CHECK_DETAIL_1'][128] = EnumEntry('ACCELS_INCONSISTENT', '''''')
RANGEFINDER_NOT_HEALTHY = 256 # 
enums['SWOOP_ARMING_CHECK_DETAIL_1'][256] = EnumEntry('RANGEFINDER_NOT_HEALTHY', '''''')
COMPASS_NOT_CALIBRATED = 512 # 
enums['SWOOP_ARMING_CHECK_DETAIL_1'][512] = EnumEntry('COMPASS_NOT_CALIBRATED', '''''')
COMPASS_OFFSETS = 1024 # 
enums['SWOOP_ARMING_CHECK_DETAIL_1'][1024] = EnumEntry('COMPASS_OFFSETS', '''''')
AUTOPILOT_VOLTAGE_ERROR = 2048 # 
enums['SWOOP_ARMING_CHECK_DETAIL_1'][2048] = EnumEntry('AUTOPILOT_VOLTAGE_ERROR', '''''')
AUTOPILOT_INTERNAL_SYSTEM_ERROR = 4096 # 
enums['SWOOP_ARMING_CHECK_DETAIL_1'][4096] = EnumEntry('AUTOPILOT_INTERNAL_SYSTEM_ERROR', '''''')
MOTORS_ESTOP = 8192 # 
enums['SWOOP_ARMING_CHECK_DETAIL_1'][8192] = EnumEntry('MOTORS_ESTOP', '''''')
GPS_BLENDING_UNHEALTHY = 16384 # 
enums['SWOOP_ARMING_CHECK_DETAIL_1'][16384] = EnumEntry('GPS_BLENDING_UNHEALTHY', '''''')
BAD_PARAMS = 32768 # 
enums['SWOOP_ARMING_CHECK_DETAIL_1'][32768] = EnumEntry('BAD_PARAMS', '''''')
SWOOP_ARMING_CHECK_DETAIL_1_ENUM_END = 32769 # 
enums['SWOOP_ARMING_CHECK_DETAIL_1'][32769] = EnumEntry('SWOOP_ARMING_CHECK_DETAIL_1_ENUM_END', '''''')

# SWOOP_ARMING_CHECK_DETAIL_2
enums['SWOOP_ARMING_CHECK_DETAIL_2'] = {}
AIRSPEED_1_NOT_HEALTHY = 1 # 
enums['SWOOP_ARMING_CHECK_DETAIL_2'][1] = EnumEntry('AIRSPEED_1_NOT_HEALTHY', '''''')
AIRSPEED_2_NOT_HEALTHY = 2 # 
enums['SWOOP_ARMING_CHECK_DETAIL_2'][2] = EnumEntry('AIRSPEED_2_NOT_HEALTHY', '''''')
AIRSPEED_3_NOT_HEALTHY = 4 # 
enums['SWOOP_ARMING_CHECK_DETAIL_2'][4] = EnumEntry('AIRSPEED_3_NOT_HEALTHY', '''''')
AIRSPEED_4_NOT_HEALTHY = 8 # 
enums['SWOOP_ARMING_CHECK_DETAIL_2'][8] = EnumEntry('AIRSPEED_4_NOT_HEALTHY', '''''')
QUADPLANE_NOT_RUNNING = 16 # 
enums['SWOOP_ARMING_CHECK_DETAIL_2'][16] = EnumEntry('QUADPLANE_NOT_RUNNING', '''''')
BATTERY_PROBLEM = 32 # 
enums['SWOOP_ARMING_CHECK_DETAIL_2'][32] = EnumEntry('BATTERY_PROBLEM', '''''')
LOGGING_FAILED = 64 # 
enums['SWOOP_ARMING_CHECK_DETAIL_2'][64] = EnumEntry('LOGGING_FAILED', '''''')
NO_SD_CARD = 128 # 
enums['SWOOP_ARMING_CHECK_DETAIL_2'][128] = EnumEntry('NO_SD_CARD', '''''')
MANUAL_TRANSMITTER_PROBLEM = 256 # 
enums['SWOOP_ARMING_CHECK_DETAIL_2'][256] = EnumEntry('MANUAL_TRANSMITTER_PROBLEM', '''''')
NO_MISSION_LOADED = 512 # 
enums['SWOOP_ARMING_CHECK_DETAIL_2'][512] = EnumEntry('NO_MISSION_LOADED', '''''')
MISSION_MISSING_ELEMENTS = 1024 # 
enums['SWOOP_ARMING_CHECK_DETAIL_2'][1024] = EnumEntry('MISSION_MISSING_ELEMENTS', '''''')
SWOOP_ARMING_CHECK_DETAIL_2_ENUM_END = 1025 # 
enums['SWOOP_ARMING_CHECK_DETAIL_2'][1025] = EnumEntry('SWOOP_ARMING_CHECK_DETAIL_2_ENUM_END', '''''')

# SWOOP_ARMING_CHECK_COMMON
enums['SWOOP_ARMING_CHECK_COMMON'] = {}
AHRS_NOT_HEALTHY = 1 # 
enums['SWOOP_ARMING_CHECK_COMMON'][1] = EnumEntry('AHRS_NOT_HEALTHY', '''''')
BAD_GPS_POSITION = 2 # 
enums['SWOOP_ARMING_CHECK_COMMON'][2] = EnumEntry('BAD_GPS_POSITION', '''''')
GPS_NOT_HEALTHY = 4 # 
enums['SWOOP_ARMING_CHECK_COMMON'][4] = EnumEntry('GPS_NOT_HEALTHY', '''''')
GYRO_NOT_HEALTHY = 8 # 
enums['SWOOP_ARMING_CHECK_COMMON'][8] = EnumEntry('GYRO_NOT_HEALTHY', '''''')
ACCELS_NOT_HEALTHY = 16 # 
enums['SWOOP_ARMING_CHECK_COMMON'][16] = EnumEntry('ACCELS_NOT_HEALTHY', '''''')
COMPASS_NOT_HEALTHY = 32 # 
enums['SWOOP_ARMING_CHECK_COMMON'][32] = EnumEntry('COMPASS_NOT_HEALTHY', '''''')
HIGH_MAG_FIELD_STRENGTH = 64 # 
enums['SWOOP_ARMING_CHECK_COMMON'][64] = EnumEntry('HIGH_MAG_FIELD_STRENGTH', '''''')
COMPASS_INCONSISTENT = 128 # 
enums['SWOOP_ARMING_CHECK_COMMON'][128] = EnumEntry('COMPASS_INCONSISTENT', '''''')
GPS_POSITIONS_DIFFERENT = 256 # 
enums['SWOOP_ARMING_CHECK_COMMON'][256] = EnumEntry('GPS_POSITIONS_DIFFERENT', '''''')
GPS_DIFFERENT_TO_EKF = 512 # 
enums['SWOOP_ARMING_CHECK_COMMON'][512] = EnumEntry('GPS_DIFFERENT_TO_EKF', '''''')
ADSB_THREAT = 1024 # 
enums['SWOOP_ARMING_CHECK_COMMON'][1024] = EnumEntry('ADSB_THREAT', '''''')
SWOOP_ARMING_CHECK_COMMON_ENUM_END = 1025 # 
enums['SWOOP_ARMING_CHECK_COMMON'][1025] = EnumEntry('SWOOP_ARMING_CHECK_COMMON_ENUM_END', '''''')

# SWOOP_FLAG_INTENSITY
enums['SWOOP_FLAG_INTENSITY'] = {}
NO_FLAG = 0 # 
enums['SWOOP_FLAG_INTENSITY'][0] = EnumEntry('NO_FLAG', '''''')
NOTE = 1 # 
enums['SWOOP_FLAG_INTENSITY'][1] = EnumEntry('NOTE', '''''')
ADVICE = 2 # 
enums['SWOOP_FLAG_INTENSITY'][2] = EnumEntry('ADVICE', '''''')
CAUTION = 3 # 
enums['SWOOP_FLAG_INTENSITY'][3] = EnumEntry('CAUTION', '''''')
WARNING = 4 # 
enums['SWOOP_FLAG_INTENSITY'][4] = EnumEntry('WARNING', '''''')
SWOOP_FLAG_INTENSITY_ENUM_END = 5 # 
enums['SWOOP_FLAG_INTENSITY'][5] = EnumEntry('SWOOP_FLAG_INTENSITY_ENUM_END', '''''')

# SWOOP_HOVER_ASSIST_DETAIL
enums['SWOOP_HOVER_ASSIST_DETAIL'] = {}
HOVER_ASSIST_REASON_ALT = 1 # 
enums['SWOOP_HOVER_ASSIST_DETAIL'][1] = EnumEntry('HOVER_ASSIST_REASON_ALT', '''''')
HOVER_ASSIST_REASON_SPEED = 2 # 
enums['SWOOP_HOVER_ASSIST_DETAIL'][2] = EnumEntry('HOVER_ASSIST_REASON_SPEED', '''''')
HOVER_ASSIST_REASON_ATTITUDE = 4 # 
enums['SWOOP_HOVER_ASSIST_DETAIL'][4] = EnumEntry('HOVER_ASSIST_REASON_ATTITUDE', '''''')
SWOOP_HOVER_ASSIST_DETAIL_ENUM_END = 5 # 
enums['SWOOP_HOVER_ASSIST_DETAIL'][5] = EnumEntry('SWOOP_HOVER_ASSIST_DETAIL_ENUM_END', '''''')

# SWOOP_EMERGENCY_LAND_DETAIL
enums['SWOOP_EMERGENCY_LAND_DETAIL'] = {}
HOVER_ASSIST_LONG_TIMEOUT = 1 # 
enums['SWOOP_EMERGENCY_LAND_DETAIL'][1] = EnumEntry('HOVER_ASSIST_LONG_TIMEOUT', '''''')
HOVER_ASSIST_COUNTER_TIMEOUT = 2 # 
enums['SWOOP_EMERGENCY_LAND_DETAIL'][2] = EnumEntry('HOVER_ASSIST_COUNTER_TIMEOUT', '''''')
SWOOP_EMERGENCY_LAND_DETAIL_ENUM_END = 3 # 
enums['SWOOP_EMERGENCY_LAND_DETAIL'][3] = EnumEntry('SWOOP_EMERGENCY_LAND_DETAIL_ENUM_END', '''''')

# SWOOP_GPS_HEALTH_DETAIL
enums['SWOOP_GPS_HEALTH_DETAIL'] = {}
GPS1_GOOD = 1 # 
enums['SWOOP_GPS_HEALTH_DETAIL'][1] = EnumEntry('GPS1_GOOD', '''''')
GPS1_DEGRADED = 2 # 
enums['SWOOP_GPS_HEALTH_DETAIL'][2] = EnumEntry('GPS1_DEGRADED', '''''')
GPS1_SIGNIFICANTLY_DEGRADED = 4 # 
enums['SWOOP_GPS_HEALTH_DETAIL'][4] = EnumEntry('GPS1_SIGNIFICANTLY_DEGRADED', '''''')
GPS1_FAILED = 8 # 
enums['SWOOP_GPS_HEALTH_DETAIL'][8] = EnumEntry('GPS1_FAILED', '''''')
GPS2_GOOD = 16 # 
enums['SWOOP_GPS_HEALTH_DETAIL'][16] = EnumEntry('GPS2_GOOD', '''''')
GPS2_DEGRADED = 32 # 
enums['SWOOP_GPS_HEALTH_DETAIL'][32] = EnumEntry('GPS2_DEGRADED', '''''')
GPS2_SIGNIFICANTLY_DEGRADED = 64 # 
enums['SWOOP_GPS_HEALTH_DETAIL'][64] = EnumEntry('GPS2_SIGNIFICANTLY_DEGRADED', '''''')
GPS2_FAILED = 128 # 
enums['SWOOP_GPS_HEALTH_DETAIL'][128] = EnumEntry('GPS2_FAILED', '''''')
SWOOP_GPS_HEALTH_DETAIL_ENUM_END = 129 # 
enums['SWOOP_GPS_HEALTH_DETAIL'][129] = EnumEntry('SWOOP_GPS_HEALTH_DETAIL_ENUM_END', '''''')

# SWOOP_NO_DETAIL
enums['SWOOP_NO_DETAIL'] = {}
NO_DETAILS_AVAILIABLE = 0 # 
enums['SWOOP_NO_DETAIL'][0] = EnumEntry('NO_DETAILS_AVAILIABLE', '''''')
SWOOP_NO_DETAIL_ENUM_END = 1 # 
enums['SWOOP_NO_DETAIL'][1] = EnumEntry('SWOOP_NO_DETAIL_ENUM_END', '''''')

# SWOOP_HOVER_MOTOR_FAIL_DETAIL
enums['SWOOP_HOVER_MOTOR_FAIL_DETAIL'] = {}
HOVER_MOTOR_1_FAILURE = 1 # 
enums['SWOOP_HOVER_MOTOR_FAIL_DETAIL'][1] = EnumEntry('HOVER_MOTOR_1_FAILURE', '''''')
HOVER_MOTOR_2_FAILURE = 2 # 
enums['SWOOP_HOVER_MOTOR_FAIL_DETAIL'][2] = EnumEntry('HOVER_MOTOR_2_FAILURE', '''''')
HOVER_MOTOR_3_FAILURE = 4 # 
enums['SWOOP_HOVER_MOTOR_FAIL_DETAIL'][4] = EnumEntry('HOVER_MOTOR_3_FAILURE', '''''')
HOVER_MOTOR_4_FAILURE = 8 # 
enums['SWOOP_HOVER_MOTOR_FAIL_DETAIL'][8] = EnumEntry('HOVER_MOTOR_4_FAILURE', '''''')
HOVER_MOTOR_OSCILLATIONS = 16 # 
enums['SWOOP_HOVER_MOTOR_FAIL_DETAIL'][16] = EnumEntry('HOVER_MOTOR_OSCILLATIONS', '''''')
HOVER_MOTOR_OFFSETS = 32 # 
enums['SWOOP_HOVER_MOTOR_FAIL_DETAIL'][32] = EnumEntry('HOVER_MOTOR_OFFSETS', '''''')
HOVER_MOTOR_OUTPUT_SATURATION = 64 # 
enums['SWOOP_HOVER_MOTOR_FAIL_DETAIL'][64] = EnumEntry('HOVER_MOTOR_OUTPUT_SATURATION', '''''')
HOVER_MOTOR_HIGH_POWER = 2048 # 
enums['SWOOP_HOVER_MOTOR_FAIL_DETAIL'][2048] = EnumEntry('HOVER_MOTOR_HIGH_POWER', '''''')
SWOOP_HOVER_MOTOR_FAIL_DETAIL_ENUM_END = 2049 # 
enums['SWOOP_HOVER_MOTOR_FAIL_DETAIL'][2049] = EnumEntry('SWOOP_HOVER_MOTOR_FAIL_DETAIL_ENUM_END', '''''')

# SWOOP_FORWARD_MOTOR_FAIL_DETAIL
enums['SWOOP_FORWARD_MOTOR_FAIL_DETAIL'] = {}
FORWARD_MOTOR_1_FAILURE = 1 # 
enums['SWOOP_FORWARD_MOTOR_FAIL_DETAIL'][1] = EnumEntry('FORWARD_MOTOR_1_FAILURE', '''''')
FORWARD_MOTOR_2_FAILURE = 2 # 
enums['SWOOP_FORWARD_MOTOR_FAIL_DETAIL'][2] = EnumEntry('FORWARD_MOTOR_2_FAILURE', '''''')
FORWARD_MOTOR_OUTPUT_SATURATION = 4 # 
enums['SWOOP_FORWARD_MOTOR_FAIL_DETAIL'][4] = EnumEntry('FORWARD_MOTOR_OUTPUT_SATURATION', '''''')
FORWARD_MOTOR_HIGH_POWER = 8 # 
enums['SWOOP_FORWARD_MOTOR_FAIL_DETAIL'][8] = EnumEntry('FORWARD_MOTOR_HIGH_POWER', '''''')
SWOOP_FORWARD_MOTOR_FAIL_DETAIL_ENUM_END = 9 # 
enums['SWOOP_FORWARD_MOTOR_FAIL_DETAIL'][9] = EnumEntry('SWOOP_FORWARD_MOTOR_FAIL_DETAIL_ENUM_END', '''''')

# LIDAR_DETAIL
enums['LIDAR_DETAIL'] = {}
LIDAR_RANGE = 1 # 
enums['LIDAR_DETAIL'][1] = EnumEntry('LIDAR_RANGE', '''''')
LIDAR_FAILURE = 2 # 
enums['LIDAR_DETAIL'][2] = EnumEntry('LIDAR_FAILURE', '''''')
LIDAR_DETAIL_ENUM_END = 3 # 
enums['LIDAR_DETAIL'][3] = EnumEntry('LIDAR_DETAIL_ENUM_END', '''''')

# FORWARD_BATTERY_DETAIL
enums['FORWARD_BATTERY_DETAIL'] = {}
FORWARD_ENDURANCE = 1 # 
enums['FORWARD_BATTERY_DETAIL'][1] = EnumEntry('FORWARD_ENDURANCE', '''''')
FORWARD_BATTERY_FAILURE_DETECTED = 2 # 
enums['FORWARD_BATTERY_DETAIL'][2] = EnumEntry('FORWARD_BATTERY_FAILURE_DETECTED', '''''')
FORWARD_BATTERY_DETAIL_ENUM_END = 3 # 
enums['FORWARD_BATTERY_DETAIL'][3] = EnumEntry('FORWARD_BATTERY_DETAIL_ENUM_END', '''''')

# HOVER_BATTERY_DETAIL
enums['HOVER_BATTERY_DETAIL'] = {}
HOVER_ENDURANCE = 1 # 
enums['HOVER_BATTERY_DETAIL'][1] = EnumEntry('HOVER_ENDURANCE', '''''')
HOVER_BATTERY_FAILURE_DETECTED = 2 # 
enums['HOVER_BATTERY_DETAIL'][2] = EnumEntry('HOVER_BATTERY_FAILURE_DETECTED', '''''')
HOVER_BATTERY_DETAIL_ENUM_END = 3 # 
enums['HOVER_BATTERY_DETAIL'][3] = EnumEntry('HOVER_BATTERY_DETAIL_ENUM_END', '''''')

# ALTITTUDE_DETAIL
enums['ALTITTUDE_DETAIL'] = {}
ALTITUDE_HIGH = 1 # 
enums['ALTITTUDE_DETAIL'][1] = EnumEntry('ALTITUDE_HIGH', '''''')
ALTITUDE_LOW = 2 # 
enums['ALTITTUDE_DETAIL'][2] = EnumEntry('ALTITUDE_LOW', '''''')
ALTITTUDE_DETAIL_ENUM_END = 3 # 
enums['ALTITTUDE_DETAIL'][3] = EnumEntry('ALTITTUDE_DETAIL_ENUM_END', '''''')

# LANDING_DETAIL
enums['LANDING_DETAIL'] = {}
LANDING_G = 1 # 
enums['LANDING_DETAIL'][1] = EnumEntry('LANDING_G', '''''')
LANDING_ATTITUDE = 2 # 
enums['LANDING_DETAIL'][2] = EnumEntry('LANDING_ATTITUDE', '''''')
LANDING_DETAIL_ENUM_END = 3 # 
enums['LANDING_DETAIL'][3] = EnumEntry('LANDING_DETAIL_ENUM_END', '''''')

# AERODYNAMIC_DETAIL
enums['AERODYNAMIC_DETAIL'] = {}
ASYMETRIC_DRAG = 1 # 
enums['AERODYNAMIC_DETAIL'][1] = EnumEntry('ASYMETRIC_DRAG', '''''')
FORWARD_HIGH_DRAG = 2 # 
enums['AERODYNAMIC_DETAIL'][2] = EnumEntry('FORWARD_HIGH_DRAG', '''''')
ESC_TEMP = 4 # 
enums['AERODYNAMIC_DETAIL'][4] = EnumEntry('ESC_TEMP', '''''')
AERODYNAMIC_DETAIL_ENUM_END = 5 # 
enums['AERODYNAMIC_DETAIL'][5] = EnumEntry('AERODYNAMIC_DETAIL_ENUM_END', '''''')

# AIRSPEED_DETAIL
enums['AIRSPEED_DETAIL'] = {}
AIRSPEED_LOW = 1 # 
enums['AIRSPEED_DETAIL'][1] = EnumEntry('AIRSPEED_LOW', '''''')
AIRSPEED_HIGH = 2 # 
enums['AIRSPEED_DETAIL'][2] = EnumEntry('AIRSPEED_HIGH', '''''')
AIRSPEED_SENSOR_1 = 4 # 
enums['AIRSPEED_DETAIL'][4] = EnumEntry('AIRSPEED_SENSOR_1', '''''')
AIRSPEED_SENSOR_2 = 8 # 
enums['AIRSPEED_DETAIL'][8] = EnumEntry('AIRSPEED_SENSOR_2', '''''')
AIRSPEED_SENSOR_3 = 16 # 
enums['AIRSPEED_DETAIL'][16] = EnumEntry('AIRSPEED_SENSOR_3', '''''')
AIRSPEED_SENSOR_4 = 32 # 
enums['AIRSPEED_DETAIL'][32] = EnumEntry('AIRSPEED_SENSOR_4', '''''')
AIRSPEED_DETAIL_ENUM_END = 33 # 
enums['AIRSPEED_DETAIL'][33] = EnumEntry('AIRSPEED_DETAIL_ENUM_END', '''''')

# SERVO_DETAIL
enums['SERVO_DETAIL'] = {}
ELEVATOR_SERVO_POSITION_OFFSET_DETECTED = 1 # 
enums['SERVO_DETAIL'][1] = EnumEntry('ELEVATOR_SERVO_POSITION_OFFSET_DETECTED', '''''')
ELEVATOR_SERVO_FAILURE_DETECTED = 2 # 
enums['SERVO_DETAIL'][2] = EnumEntry('ELEVATOR_SERVO_FAILURE_DETECTED', '''''')
AILERON_SERVO_POSITION_OFFSET_DETECTED = 4 # 
enums['SERVO_DETAIL'][4] = EnumEntry('AILERON_SERVO_POSITION_OFFSET_DETECTED', '''''')
AILERON_SERVO_FAILURE_DETECTED = 8 # 
enums['SERVO_DETAIL'][8] = EnumEntry('AILERON_SERVO_FAILURE_DETECTED', '''''')
RUDDER_SERVO_POSITION_OFFSET_DETECTED = 16 # 
enums['SERVO_DETAIL'][16] = EnumEntry('RUDDER_SERVO_POSITION_OFFSET_DETECTED', '''''')
RUDDER_SERVO_FAILURE_DETECTED = 32 # 
enums['SERVO_DETAIL'][32] = EnumEntry('RUDDER_SERVO_FAILURE_DETECTED', '''''')
SERVO_DETAIL_ENUM_END = 33 # 
enums['SERVO_DETAIL'][33] = EnumEntry('SERVO_DETAIL_ENUM_END', '''''')

# SWOOP_STATUS_TYPE
enums['SWOOP_STATUS_TYPE'] = {}
DISSARMED_ON_GROUND = 0 # 
enums['SWOOP_STATUS_TYPE'][0] = EnumEntry('DISSARMED_ON_GROUND', '''''')
MOTORS_IDLING = 1 # 
enums['SWOOP_STATUS_TYPE'][1] = EnumEntry('MOTORS_IDLING', '''''')
TAKEOFF = 2 # 
enums['SWOOP_STATUS_TYPE'][2] = EnumEntry('TAKEOFF', '''''')
TRANSITION_TO_FORWARD_FLIGHT = 3 # 
enums['SWOOP_STATUS_TYPE'][3] = EnumEntry('TRANSITION_TO_FORWARD_FLIGHT', '''''')
FORWARD_FLIGHT = 4 # 
enums['SWOOP_STATUS_TYPE'][4] = EnumEntry('FORWARD_FLIGHT', '''''')
TRANSITION_TO_HOVER = 5 # 
enums['SWOOP_STATUS_TYPE'][5] = EnumEntry('TRANSITION_TO_HOVER', '''''')
SEARCHING_FOR_TARGET = 6 # 
enums['SWOOP_STATUS_TYPE'][6] = EnumEntry('SEARCHING_FOR_TARGET', '''''')
LANDING_STATUS = 7 # 
enums['SWOOP_STATUS_TYPE'][7] = EnumEntry('LANDING_STATUS', '''''')
ORBIT = 8 # 
enums['SWOOP_STATUS_TYPE'][8] = EnumEntry('ORBIT', '''''')
EMERGENCY_LAND_STATUS = 9 # 
enums['SWOOP_STATUS_TYPE'][9] = EnumEntry('EMERGENCY_LAND_STATUS', '''''')
PARACHUTE_DEPLOYED = 10 # 
enums['SWOOP_STATUS_TYPE'][10] = EnumEntry('PARACHUTE_DEPLOYED', '''''')
ABORTING_TAKEOFF = 11 # 
enums['SWOOP_STATUS_TYPE'][11] = EnumEntry('ABORTING_TAKEOFF', '''''')
STATUS_OTHER = 12 # 
enums['SWOOP_STATUS_TYPE'][12] = EnumEntry('STATUS_OTHER', '''''')
SWOOP_STATUS_TYPE_ENUM_END = 13 # 
enums['SWOOP_STATUS_TYPE'][13] = EnumEntry('SWOOP_STATUS_TYPE_ENUM_END', '''''')

# SWOOP_INFLIGHT_FLAGS
enums['SWOOP_INFLIGHT_FLAGS'] = {}
HOVER_ASSIST = 1 # 
enums['SWOOP_INFLIGHT_FLAGS'][1] = EnumEntry('HOVER_ASSIST', '''''')
EMERGENCY_LAND = 2 # 
enums['SWOOP_INFLIGHT_FLAGS'][2] = EnumEntry('EMERGENCY_LAND', '''''')
GPS_HEALTH = 4 # 
enums['SWOOP_INFLIGHT_FLAGS'][4] = EnumEntry('GPS_HEALTH', '''''')
VIBRATION = 8 # 
enums['SWOOP_INFLIGHT_FLAGS'][8] = EnumEntry('VIBRATION', '''''')
HOVER_MOTORS = 16 # 
enums['SWOOP_INFLIGHT_FLAGS'][16] = EnumEntry('HOVER_MOTORS', '''''')
FORWARD_MOTORS = 32 # 
enums['SWOOP_INFLIGHT_FLAGS'][32] = EnumEntry('FORWARD_MOTORS', '''''')
LIDAR = 64 # 
enums['SWOOP_INFLIGHT_FLAGS'][64] = EnumEntry('LIDAR', '''''')
HOVER_BATTERY = 128 # 
enums['SWOOP_INFLIGHT_FLAGS'][128] = EnumEntry('HOVER_BATTERY', '''''')
FORWARD_BATTERY = 256 # 
enums['SWOOP_INFLIGHT_FLAGS'][256] = EnumEntry('FORWARD_BATTERY', '''''')
ALTITUDE = 512 # 
enums['SWOOP_INFLIGHT_FLAGS'][512] = EnumEntry('ALTITUDE', '''''')
WIND = 1024 # 
enums['SWOOP_INFLIGHT_FLAGS'][1024] = EnumEntry('WIND', '''''')
HOVER_ATTITUDE = 2048 # 
enums['SWOOP_INFLIGHT_FLAGS'][2048] = EnumEntry('HOVER_ATTITUDE', '''''')
LANDING = 4096 # 
enums['SWOOP_INFLIGHT_FLAGS'][4096] = EnumEntry('LANDING', '''''')
AERODYNAMIC = 8192 # 
enums['SWOOP_INFLIGHT_FLAGS'][8192] = EnumEntry('AERODYNAMIC', '''''')
AIRSPEED = 16384 # 
enums['SWOOP_INFLIGHT_FLAGS'][16384] = EnumEntry('AIRSPEED', '''''')
SERVO = 32768 # 
enums['SWOOP_INFLIGHT_FLAGS'][32768] = EnumEntry('SERVO', '''''')
SWOOP_INFLIGHT_FLAGS_ENUM_END = 32769 # 
enums['SWOOP_INFLIGHT_FLAGS'][32769] = EnumEntry('SWOOP_INFLIGHT_FLAGS_ENUM_END', '''''')

# message IDs
MAVLINK_MSG_ID_BAD_DATA = -1
MAVLINK_MSG_ID_SWOOP_ARMING_FLAGS = 6901
MAVLINK_MSG_ID_SWOOP_INFLIGHT_FLAGS_INSTANT = 6902
MAVLINK_MSG_ID_SWOOP_INFLIGHT_FLAGS_PERSISTENT = 6903
MAVLINK_MSG_ID_SWOOP_STATUS = 6904
MAVLINK_MSG_ID_SWOOP_ENERGY = 6905

class MAVLink_swoop_arming_flags_message(MAVLink_message):
        '''
        Periodic ARMING status Flag Packet
        '''
        id = MAVLINK_MSG_ID_SWOOP_ARMING_FLAGS
        name = 'SWOOP_ARMING_FLAGS'
        fieldnames = ['armingCheckStatus', 'armingCheckFlags1', 'armingCheckFlags2', 'armingCheckFlags3']
        ordered_fieldnames = ['armingCheckFlags1', 'armingCheckFlags2', 'armingCheckFlags3', 'armingCheckStatus']
        fieldtypes = ['uint8_t', 'uint16_t', 'uint16_t', 'uint16_t']
        fielddisplays_by_name = {}
        fieldenums_by_name = {"armingCheckStatus": "SWOOP_ARMING_CHECKS_PASSED", "armingCheckFlags1": "SWOOP_ARMING_CHECK_DETAIL_1", "armingCheckFlags2": "SWOOP_ARMING_CHECK_DETAIL_2", "armingCheckFlags3": "SWOOP_ARMING_CHECK_COMMON"}
        fieldunits_by_name = {}
        format = '<HHHB'
        native_format = bytearray('<HHHB', 'ascii')
        orders = [3, 0, 1, 2]
        lengths = [1, 1, 1, 1]
        array_lengths = [0, 0, 0, 0]
        crc_extra = 26
        unpacker = struct.Struct('<HHHB')

        def __init__(self, armingCheckStatus, armingCheckFlags1, armingCheckFlags2, armingCheckFlags3):
                MAVLink_message.__init__(self, MAVLink_swoop_arming_flags_message.id, MAVLink_swoop_arming_flags_message.name)
                self._fieldnames = MAVLink_swoop_arming_flags_message.fieldnames
                self.armingCheckStatus = armingCheckStatus
                self.armingCheckFlags1 = armingCheckFlags1
                self.armingCheckFlags2 = armingCheckFlags2
                self.armingCheckFlags3 = armingCheckFlags3

        def pack(self, mav, force_mavlink1=False):
                return MAVLink_message.pack(self, mav, 26, struct.pack('<HHHB', self.armingCheckFlags1, self.armingCheckFlags2, self.armingCheckFlags3, self.armingCheckStatus), force_mavlink1=force_mavlink1)

class MAVLink_swoop_inflight_flags_instant_message(MAVLink_message):
        '''
        Periodic INFLIGHT Flag Packet
        '''
        id = MAVLINK_MSG_ID_SWOOP_INFLIGHT_FLAGS_INSTANT
        name = 'SWOOP_INFLIGHT_FLAGS_INSTANT'
        fieldnames = ['inflightFlags', 'maximumIntensity', 'hoverAssistIntensity', 'emergencyLandIntensity', 'gpsIntensity', 'vibrationIntensity', 'hoverMotorIntensity', 'forwardMotorIntensity', 'lidarIntensity', 'hoverBatteryIntensity', 'forwardBatteryIntensity', 'altitudeIntensity', 'windIntensity', 'hoverAttitudeIntensity', 'landingIntensity', 'aerodynamicIntensity', 'airspeedIntensity', 'servoIntensity', 'hoverAssistDetail', 'emergencyLandDetail', 'gpsDetail', 'vibrationDetail', 'hoverMotorDetail', 'forwardMotorDetail', 'lidarDetail', 'hoverBatteryDetail', 'forwardBatteryDetail', 'altitudeDetail', 'windDetail', 'hoverAttitudeDetail', 'landingDetail', 'aerodynamicDetail', 'airspeedDetail', 'servoDetail']
        ordered_fieldnames = ['inflightFlags', 'maximumIntensity', 'hoverAssistIntensity', 'emergencyLandIntensity', 'gpsIntensity', 'vibrationIntensity', 'hoverMotorIntensity', 'forwardMotorIntensity', 'lidarIntensity', 'hoverBatteryIntensity', 'forwardBatteryIntensity', 'altitudeIntensity', 'windIntensity', 'hoverAttitudeIntensity', 'landingIntensity', 'aerodynamicIntensity', 'airspeedIntensity', 'servoIntensity', 'hoverAssistDetail', 'emergencyLandDetail', 'gpsDetail', 'vibrationDetail', 'hoverMotorDetail', 'forwardMotorDetail', 'lidarDetail', 'hoverBatteryDetail', 'forwardBatteryDetail', 'altitudeDetail', 'windDetail', 'hoverAttitudeDetail', 'landingDetail', 'aerodynamicDetail', 'airspeedDetail', 'servoDetail']
        fieldtypes = ['uint16_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t']
        fielddisplays_by_name = {}
        fieldenums_by_name = {"inflightFlags": "SWOOP_INFLIGHT_FLAGS", "maximumIntensity": "SWOOP_FLAG_INTENSITY", "hoverAssistIntensity": "SWOOP_FLAG_INTENSITY", "emergencyLandIntensity": "SWOOP_FLAG_INTENSITY", "gpsIntensity": "SWOOP_FLAG_INTENSITY", "vibrationIntensity": "SWOOP_FLAG_INTENSITY", "hoverMotorIntensity": "SWOOP_FLAG_INTENSITY", "forwardMotorIntensity": "SWOOP_FLAG_INTENSITY", "lidarIntensity": "SWOOP_FLAG_INTENSITY", "hoverBatteryIntensity": "SWOOP_FLAG_INTENSITY", "forwardBatteryIntensity": "SWOOP_FLAG_INTENSITY", "altitudeIntensity": "SWOOP_FLAG_INTENSITY", "windIntensity": "SWOOP_FLAG_INTENSITY", "hoverAttitudeIntensity": "SWOOP_FLAG_INTENSITY", "landingIntensity": "SWOOP_FLAG_INTENSITY", "aerodynamicIntensity": "SWOOP_FLAG_INTENSITY", "airspeedIntensity": "SWOOP_FLAG_INTENSITY", "servoIntensity": "SWOOP_FLAG_INTENSITY", "hoverAssistDetail": "SWOOP_HOVER_ASSIST_DETAIL", "emergencyLandDetail": "SWOOP_EMERGENCY_LAND_DETAIL", "gpsDetail": "SWOOP_GPS_HEALTH_DETAIL", "vibrationDetail": "SWOOP_NO_DETAIL", "hoverMotorDetail": "SWOOP_HOVER_MOTOR_FAIL_DETAIL", "forwardMotorDetail": "SWOOP_FORWARD_MOTOR_FAIL_DETAIL", "lidarDetail": "LIDAR_DETAIL", "hoverBatteryDetail": "FORWARD_BATTERY_DETAIL", "forwardBatteryDetail": "HOVER_BATTERY_DETAIL", "altitudeDetail": "ALTITTUDE_DETAIL", "windDetail": "SWOOP_NO_DETAIL", "hoverAttitudeDetail": "SWOOP_NO_DETAIL", "landingDetail": "LANDING_DETAIL", "aerodynamicDetail": "AERODYNAMIC_DETAIL", "airspeedDetail": "AIRSPEED_DETAIL", "servoDetail": "SERVO_DETAIL"}
        fieldunits_by_name = {}
        format = '<HBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB'
        native_format = bytearray('<HBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB', 'ascii')
        orders = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
        lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
        array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        crc_extra = 127
        unpacker = struct.Struct('<HBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB')

        def __init__(self, inflightFlags, maximumIntensity, hoverAssistIntensity, emergencyLandIntensity, gpsIntensity, vibrationIntensity, hoverMotorIntensity, forwardMotorIntensity, lidarIntensity, hoverBatteryIntensity, forwardBatteryIntensity, altitudeIntensity, windIntensity, hoverAttitudeIntensity, landingIntensity, aerodynamicIntensity, airspeedIntensity, servoIntensity, hoverAssistDetail, emergencyLandDetail, gpsDetail, vibrationDetail, hoverMotorDetail, forwardMotorDetail, lidarDetail, hoverBatteryDetail, forwardBatteryDetail, altitudeDetail, windDetail, hoverAttitudeDetail, landingDetail, aerodynamicDetail, airspeedDetail, servoDetail):
                MAVLink_message.__init__(self, MAVLink_swoop_inflight_flags_instant_message.id, MAVLink_swoop_inflight_flags_instant_message.name)
                self._fieldnames = MAVLink_swoop_inflight_flags_instant_message.fieldnames
                self.inflightFlags = inflightFlags
                self.maximumIntensity = maximumIntensity
                self.hoverAssistIntensity = hoverAssistIntensity
                self.emergencyLandIntensity = emergencyLandIntensity
                self.gpsIntensity = gpsIntensity
                self.vibrationIntensity = vibrationIntensity
                self.hoverMotorIntensity = hoverMotorIntensity
                self.forwardMotorIntensity = forwardMotorIntensity
                self.lidarIntensity = lidarIntensity
                self.hoverBatteryIntensity = hoverBatteryIntensity
                self.forwardBatteryIntensity = forwardBatteryIntensity
                self.altitudeIntensity = altitudeIntensity
                self.windIntensity = windIntensity
                self.hoverAttitudeIntensity = hoverAttitudeIntensity
                self.landingIntensity = landingIntensity
                self.aerodynamicIntensity = aerodynamicIntensity
                self.airspeedIntensity = airspeedIntensity
                self.servoIntensity = servoIntensity
                self.hoverAssistDetail = hoverAssistDetail
                self.emergencyLandDetail = emergencyLandDetail
                self.gpsDetail = gpsDetail
                self.vibrationDetail = vibrationDetail
                self.hoverMotorDetail = hoverMotorDetail
                self.forwardMotorDetail = forwardMotorDetail
                self.lidarDetail = lidarDetail
                self.hoverBatteryDetail = hoverBatteryDetail
                self.forwardBatteryDetail = forwardBatteryDetail
                self.altitudeDetail = altitudeDetail
                self.windDetail = windDetail
                self.hoverAttitudeDetail = hoverAttitudeDetail
                self.landingDetail = landingDetail
                self.aerodynamicDetail = aerodynamicDetail
                self.airspeedDetail = airspeedDetail
                self.servoDetail = servoDetail

        def pack(self, mav, force_mavlink1=False):
                return MAVLink_message.pack(self, mav, 127, struct.pack('<HBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB', self.inflightFlags, self.maximumIntensity, self.hoverAssistIntensity, self.emergencyLandIntensity, self.gpsIntensity, self.vibrationIntensity, self.hoverMotorIntensity, self.forwardMotorIntensity, self.lidarIntensity, self.hoverBatteryIntensity, self.forwardBatteryIntensity, self.altitudeIntensity, self.windIntensity, self.hoverAttitudeIntensity, self.landingIntensity, self.aerodynamicIntensity, self.airspeedIntensity, self.servoIntensity, self.hoverAssistDetail, self.emergencyLandDetail, self.gpsDetail, self.vibrationDetail, self.hoverMotorDetail, self.forwardMotorDetail, self.lidarDetail, self.hoverBatteryDetail, self.forwardBatteryDetail, self.altitudeDetail, self.windDetail, self.hoverAttitudeDetail, self.landingDetail, self.aerodynamicDetail, self.airspeedDetail, self.servoDetail), force_mavlink1=force_mavlink1)

class MAVLink_swoop_inflight_flags_persistent_message(MAVLink_message):
        '''
        Periodic Send of persistent inflight status flags - Resets on
        Arm
        '''
        id = MAVLINK_MSG_ID_SWOOP_INFLIGHT_FLAGS_PERSISTENT
        name = 'SWOOP_INFLIGHT_FLAGS_PERSISTENT'
        fieldnames = ['inflightFlags', 'maximumIntensity', 'hoverAssistIntensity', 'emergencyLandIntensity', 'gpsIntensity', 'vibrationIntensity', 'hoverMotorIntensity', 'forwardMotorIntensity', 'lidarIntensity', 'hoverBatteryIntensity', 'forwardBatteryIntensity', 'altitudeIntensity', 'windIntensity', 'hoverAttitudeIntensity', 'landingIntensity', 'aerodynamicIntensity', 'airspeedIntensity', 'servoIntensity', 'hoverAssistDetail', 'emergencyLandDetail', 'gpsDetail', 'vibrationDetail', 'hoverMotorDetail', 'forwardMotorDetail', 'lidarDetail', 'hoverBatteryDetail', 'forwardBatteryDetail', 'altitudeDetail', 'windDetail', 'hoverAttitudeDetail', 'landingDetail', 'aerodynamicDetail', 'airspeedDetail', 'servoDetail']
        ordered_fieldnames = ['inflightFlags', 'maximumIntensity', 'hoverAssistIntensity', 'emergencyLandIntensity', 'gpsIntensity', 'vibrationIntensity', 'hoverMotorIntensity', 'forwardMotorIntensity', 'lidarIntensity', 'hoverBatteryIntensity', 'forwardBatteryIntensity', 'altitudeIntensity', 'windIntensity', 'hoverAttitudeIntensity', 'landingIntensity', 'aerodynamicIntensity', 'airspeedIntensity', 'servoIntensity', 'hoverAssistDetail', 'emergencyLandDetail', 'gpsDetail', 'vibrationDetail', 'hoverMotorDetail', 'forwardMotorDetail', 'lidarDetail', 'hoverBatteryDetail', 'forwardBatteryDetail', 'altitudeDetail', 'windDetail', 'hoverAttitudeDetail', 'landingDetail', 'aerodynamicDetail', 'airspeedDetail', 'servoDetail']
        fieldtypes = ['uint16_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t', 'uint8_t']
        fielddisplays_by_name = {}
        fieldenums_by_name = {"inflightFlags": "SWOOP_INFLIGHT_FLAGS", "maximumIntensity": "SWOOP_FLAG_INTENSITY", "hoverAssistIntensity": "SWOOP_FLAG_INTENSITY", "emergencyLandIntensity": "SWOOP_FLAG_INTENSITY", "gpsIntensity": "SWOOP_FLAG_INTENSITY", "vibrationIntensity": "SWOOP_FLAG_INTENSITY", "hoverMotorIntensity": "SWOOP_FLAG_INTENSITY", "forwardMotorIntensity": "SWOOP_FLAG_INTENSITY", "lidarIntensity": "SWOOP_FLAG_INTENSITY", "hoverBatteryIntensity": "SWOOP_FLAG_INTENSITY", "forwardBatteryIntensity": "SWOOP_FLAG_INTENSITY", "altitudeIntensity": "SWOOP_FLAG_INTENSITY", "windIntensity": "SWOOP_FLAG_INTENSITY", "hoverAttitudeIntensity": "SWOOP_FLAG_INTENSITY", "landingIntensity": "SWOOP_FLAG_INTENSITY", "aerodynamicIntensity": "SWOOP_FLAG_INTENSITY", "airspeedIntensity": "SWOOP_FLAG_INTENSITY", "servoIntensity": "SWOOP_FLAG_INTENSITY", "hoverAssistDetail": "SWOOP_HOVER_ASSIST_DETAIL", "emergencyLandDetail": "SWOOP_EMERGENCY_LAND_DETAIL", "gpsDetail": "SWOOP_GPS_HEALTH_DETAIL", "vibrationDetail": "SWOOP_NO_DETAIL", "hoverMotorDetail": "SWOOP_HOVER_MOTOR_FAIL_DETAIL", "forwardMotorDetail": "SWOOP_FORWARD_MOTOR_FAIL_DETAIL", "lidarDetail": "LIDAR_DETAIL", "hoverBatteryDetail": "FORWARD_BATTERY_DETAIL", "forwardBatteryDetail": "HOVER_BATTERY_DETAIL", "altitudeDetail": "ALTITTUDE_DETAIL", "windDetail": "SWOOP_NO_DETAIL", "hoverAttitudeDetail": "SWOOP_NO_DETAIL", "landingDetail": "LANDING_DETAIL", "aerodynamicDetail": "AERODYNAMIC_DETAIL", "airspeedDetail": "AIRSPEED_DETAIL", "servoDetail": "SERVO_DETAIL"}
        fieldunits_by_name = {}
        format = '<HBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB'
        native_format = bytearray('<HBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB', 'ascii')
        orders = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
        lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
        array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        crc_extra = 48
        unpacker = struct.Struct('<HBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB')

        def __init__(self, inflightFlags, maximumIntensity, hoverAssistIntensity, emergencyLandIntensity, gpsIntensity, vibrationIntensity, hoverMotorIntensity, forwardMotorIntensity, lidarIntensity, hoverBatteryIntensity, forwardBatteryIntensity, altitudeIntensity, windIntensity, hoverAttitudeIntensity, landingIntensity, aerodynamicIntensity, airspeedIntensity, servoIntensity, hoverAssistDetail, emergencyLandDetail, gpsDetail, vibrationDetail, hoverMotorDetail, forwardMotorDetail, lidarDetail, hoverBatteryDetail, forwardBatteryDetail, altitudeDetail, windDetail, hoverAttitudeDetail, landingDetail, aerodynamicDetail, airspeedDetail, servoDetail):
                MAVLink_message.__init__(self, MAVLink_swoop_inflight_flags_persistent_message.id, MAVLink_swoop_inflight_flags_persistent_message.name)
                self._fieldnames = MAVLink_swoop_inflight_flags_persistent_message.fieldnames
                self.inflightFlags = inflightFlags
                self.maximumIntensity = maximumIntensity
                self.hoverAssistIntensity = hoverAssistIntensity
                self.emergencyLandIntensity = emergencyLandIntensity
                self.gpsIntensity = gpsIntensity
                self.vibrationIntensity = vibrationIntensity
                self.hoverMotorIntensity = hoverMotorIntensity
                self.forwardMotorIntensity = forwardMotorIntensity
                self.lidarIntensity = lidarIntensity
                self.hoverBatteryIntensity = hoverBatteryIntensity
                self.forwardBatteryIntensity = forwardBatteryIntensity
                self.altitudeIntensity = altitudeIntensity
                self.windIntensity = windIntensity
                self.hoverAttitudeIntensity = hoverAttitudeIntensity
                self.landingIntensity = landingIntensity
                self.aerodynamicIntensity = aerodynamicIntensity
                self.airspeedIntensity = airspeedIntensity
                self.servoIntensity = servoIntensity
                self.hoverAssistDetail = hoverAssistDetail
                self.emergencyLandDetail = emergencyLandDetail
                self.gpsDetail = gpsDetail
                self.vibrationDetail = vibrationDetail
                self.hoverMotorDetail = hoverMotorDetail
                self.forwardMotorDetail = forwardMotorDetail
                self.lidarDetail = lidarDetail
                self.hoverBatteryDetail = hoverBatteryDetail
                self.forwardBatteryDetail = forwardBatteryDetail
                self.altitudeDetail = altitudeDetail
                self.windDetail = windDetail
                self.hoverAttitudeDetail = hoverAttitudeDetail
                self.landingDetail = landingDetail
                self.aerodynamicDetail = aerodynamicDetail
                self.airspeedDetail = airspeedDetail
                self.servoDetail = servoDetail

        def pack(self, mav, force_mavlink1=False):
                return MAVLink_message.pack(self, mav, 48, struct.pack('<HBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB', self.inflightFlags, self.maximumIntensity, self.hoverAssistIntensity, self.emergencyLandIntensity, self.gpsIntensity, self.vibrationIntensity, self.hoverMotorIntensity, self.forwardMotorIntensity, self.lidarIntensity, self.hoverBatteryIntensity, self.forwardBatteryIntensity, self.altitudeIntensity, self.windIntensity, self.hoverAttitudeIntensity, self.landingIntensity, self.aerodynamicIntensity, self.airspeedIntensity, self.servoIntensity, self.hoverAssistDetail, self.emergencyLandDetail, self.gpsDetail, self.vibrationDetail, self.hoverMotorDetail, self.forwardMotorDetail, self.lidarDetail, self.hoverBatteryDetail, self.forwardBatteryDetail, self.altitudeDetail, self.windDetail, self.hoverAttitudeDetail, self.landingDetail, self.aerodynamicDetail, self.airspeedDetail, self.servoDetail), force_mavlink1=force_mavlink1)

class MAVLink_swoop_status_message(MAVLink_message):
        '''
        Periodic flight status Flag Packet
        '''
        id = MAVLINK_MSG_ID_SWOOP_STATUS
        name = 'SWOOP_STATUS'
        fieldnames = ['flightStatus', 'waypointType', 'nextWaypointType', 'waypointJumper']
        ordered_fieldnames = ['waypointType', 'nextWaypointType', 'waypointJumper', 'flightStatus']
        fieldtypes = ['uint8_t', 'uint16_t', 'uint16_t', 'uint16_t']
        fielddisplays_by_name = {}
        fieldenums_by_name = {"flightStatus": "SWOOP_STATUS_TYPE"}
        fieldunits_by_name = {}
        format = '<HHHB'
        native_format = bytearray('<HHHB', 'ascii')
        orders = [3, 0, 1, 2]
        lengths = [1, 1, 1, 1]
        array_lengths = [0, 0, 0, 0]
        crc_extra = 213
        unpacker = struct.Struct('<HHHB')

        def __init__(self, flightStatus, waypointType, nextWaypointType, waypointJumper):
                MAVLink_message.__init__(self, MAVLink_swoop_status_message.id, MAVLink_swoop_status_message.name)
                self._fieldnames = MAVLink_swoop_status_message.fieldnames
                self.flightStatus = flightStatus
                self.waypointType = waypointType
                self.nextWaypointType = nextWaypointType
                self.waypointJumper = waypointJumper

        def pack(self, mav, force_mavlink1=False):
                return MAVLink_message.pack(self, mav, 213, struct.pack('<HHHB', self.waypointType, self.nextWaypointType, self.waypointJumper, self.flightStatus), force_mavlink1=force_mavlink1)

class MAVLink_swoop_energy_message(MAVLink_message):
        '''
        range remaining data
        '''
        id = MAVLINK_MSG_ID_SWOOP_ENERGY
        name = 'SWOOP_ENERGY'
        fieldnames = ['ForwardEndurance', 'ForwardHealth', 'ForwardWHrPortionRemaining', 'HoverEndurance', 'HoverHealth', 'HoverWHrPortionRemaining', 'ForwardTimeToNextLanding', 'ForwardTimeToEndOfMission', 'HoverTimeToNextLanding', 'HoverTimeToEndOfMission']
        ordered_fieldnames = ['ForwardEndurance', 'HoverEndurance', 'ForwardTimeToNextLanding', 'ForwardTimeToEndOfMission', 'HoverTimeToNextLanding', 'HoverTimeToEndOfMission', 'ForwardHealth', 'ForwardWHrPortionRemaining', 'HoverHealth', 'HoverWHrPortionRemaining']
        fieldtypes = ['uint16_t', 'uint8_t', 'uint8_t', 'uint16_t', 'uint8_t', 'uint8_t', 'uint16_t', 'uint16_t', 'uint16_t', 'uint16_t']
        fielddisplays_by_name = {}
        fieldenums_by_name = {}
        fieldunits_by_name = {"ForwardEndurance": "s", "ForwardWHrPortionRemaining": "%", "HoverEndurance": "s", "HoverWHrPortionRemaining": "%", "ForwardTimeToNextLanding": "s", "ForwardTimeToEndOfMission": "s", "HoverTimeToNextLanding": "s", "HoverTimeToEndOfMission": "s"}
        format = '<HHHHHHBBBB'
        native_format = bytearray('<HHHHHHBBBB', 'ascii')
        orders = [0, 6, 7, 1, 8, 9, 2, 3, 4, 5]
        lengths = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
        array_lengths = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        crc_extra = 110
        unpacker = struct.Struct('<HHHHHHBBBB')

        def __init__(self, ForwardEndurance, ForwardHealth, ForwardWHrPortionRemaining, HoverEndurance, HoverHealth, HoverWHrPortionRemaining, ForwardTimeToNextLanding, ForwardTimeToEndOfMission, HoverTimeToNextLanding, HoverTimeToEndOfMission):
                MAVLink_message.__init__(self, MAVLink_swoop_energy_message.id, MAVLink_swoop_energy_message.name)
                self._fieldnames = MAVLink_swoop_energy_message.fieldnames
                self.ForwardEndurance = ForwardEndurance
                self.ForwardHealth = ForwardHealth
                self.ForwardWHrPortionRemaining = ForwardWHrPortionRemaining
                self.HoverEndurance = HoverEndurance
                self.HoverHealth = HoverHealth
                self.HoverWHrPortionRemaining = HoverWHrPortionRemaining
                self.ForwardTimeToNextLanding = ForwardTimeToNextLanding
                self.ForwardTimeToEndOfMission = ForwardTimeToEndOfMission
                self.HoverTimeToNextLanding = HoverTimeToNextLanding
                self.HoverTimeToEndOfMission = HoverTimeToEndOfMission

        def pack(self, mav, force_mavlink1=False):
                return MAVLink_message.pack(self, mav, 110, struct.pack('<HHHHHHBBBB', self.ForwardEndurance, self.HoverEndurance, self.ForwardTimeToNextLanding, self.ForwardTimeToEndOfMission, self.HoverTimeToNextLanding, self.HoverTimeToEndOfMission, self.ForwardHealth, self.ForwardWHrPortionRemaining, self.HoverHealth, self.HoverWHrPortionRemaining), force_mavlink1=force_mavlink1)


mavlink_map = {
        MAVLINK_MSG_ID_SWOOP_ARMING_FLAGS : MAVLink_swoop_arming_flags_message,
        MAVLINK_MSG_ID_SWOOP_INFLIGHT_FLAGS_INSTANT : MAVLink_swoop_inflight_flags_instant_message,
        MAVLINK_MSG_ID_SWOOP_INFLIGHT_FLAGS_PERSISTENT : MAVLink_swoop_inflight_flags_persistent_message,
        MAVLINK_MSG_ID_SWOOP_STATUS : MAVLink_swoop_status_message,
        MAVLINK_MSG_ID_SWOOP_ENERGY : MAVLink_swoop_energy_message,
}

class MAVError(Exception):
        '''MAVLink error class'''
        def __init__(self, msg):
            Exception.__init__(self, msg)
            self.message = msg

class MAVString(str):
        '''NUL terminated string'''
        def __init__(self, s):
                str.__init__(self)
        def __str__(self):
            i = self.find(chr(0))
            if i == -1:
                return self[:]
            return self[0:i]

class MAVLink_bad_data(MAVLink_message):
        '''
        a piece of bad data in a mavlink stream
        '''
        def __init__(self, data, reason):
                MAVLink_message.__init__(self, MAVLINK_MSG_ID_BAD_DATA, 'BAD_DATA')
                self._fieldnames = ['data', 'reason']
                self.data = data
                self.reason = reason
                self._msgbuf = data

        def __str__(self):
            '''Override the __str__ function from MAVLink_messages because non-printable characters are common in to be the reason for this message to exist.'''
            return '%s {%s, data:%s}' % (self._type, self.reason, [('%x' % ord(i) if isinstance(i, str) else '%x' % i) for i in self.data])

class MAVLinkSigning(object):
    '''MAVLink signing state class'''
    def __init__(self):
        self.secret_key = None
        self.timestamp = 0
        self.link_id = 0
        self.sign_outgoing = False
        self.allow_unsigned_callback = None
        self.stream_timestamps = {}
        self.sig_count = 0
        self.badsig_count = 0
        self.goodsig_count = 0
        self.unsigned_count = 0
        self.reject_count = 0

class MAVLink(object):
        '''MAVLink protocol handling class'''
        def __init__(self, file, srcSystem=0, srcComponent=0, use_native=False):
                self.seq = 0
                self.file = file
                self.srcSystem = srcSystem
                self.srcComponent = srcComponent
                self.callback = None
                self.callback_args = None
                self.callback_kwargs = None
                self.send_callback = None
                self.send_callback_args = None
                self.send_callback_kwargs = None
                self.buf = bytearray()
                self.buf_index = 0
                self.expected_length = HEADER_LEN_V1+2
                self.have_prefix_error = False
                self.robust_parsing = False
                self.protocol_marker = 253
                self.little_endian = True
                self.crc_extra = True
                self.sort_fields = True
                self.total_packets_sent = 0
                self.total_bytes_sent = 0
                self.total_packets_received = 0
                self.total_bytes_received = 0
                self.total_receive_errors = 0
                self.startup_time = time.time()
                self.signing = MAVLinkSigning()
                if native_supported and (use_native or native_testing or native_force):
                    print("NOTE: mavnative is currently beta-test code")
                    self.native = mavnative.NativeConnection(MAVLink_message, mavlink_map)
                else:
                    self.native = None
                if native_testing:
                    self.test_buf = bytearray()
                self.mav20_unpacker = struct.Struct('<cBBBBBBHB')
                self.mav10_unpacker = struct.Struct('<cBBBBB')
                self.mav20_h3_unpacker = struct.Struct('BBB')
                self.mav_csum_unpacker = struct.Struct('<H')
                self.mav_sign_unpacker = struct.Struct('<IH')

        def set_callback(self, callback, *args, **kwargs):
            self.callback = callback
            self.callback_args = args
            self.callback_kwargs = kwargs

        def set_send_callback(self, callback, *args, **kwargs):
            self.send_callback = callback
            self.send_callback_args = args
            self.send_callback_kwargs = kwargs

        def send(self, mavmsg, force_mavlink1=False):
                '''send a MAVLink message'''
                buf = mavmsg.pack(self, force_mavlink1=force_mavlink1)
                self.file.write(buf)
                self.seq = (self.seq + 1) % 256
                self.total_packets_sent += 1
                self.total_bytes_sent += len(buf)
                if self.send_callback:
                    self.send_callback(mavmsg, *self.send_callback_args, **self.send_callback_kwargs)

        def buf_len(self):
            return len(self.buf) - self.buf_index

        def bytes_needed(self):
            '''return number of bytes needed for next parsing stage'''
            if self.native:
                ret = self.native.expected_length - self.buf_len()
            else:
                ret = self.expected_length - self.buf_len()

            if ret <= 0:
                return 1
            return ret

        def __parse_char_native(self, c):
            '''this method exists only to see in profiling results'''
            m = self.native.parse_chars(c)
            return m

        def __callbacks(self, msg):
            '''this method exists only to make profiling results easier to read'''
            if self.callback:
                self.callback(msg, *self.callback_args, **self.callback_kwargs)

        def parse_char(self, c):
            '''input some data bytes, possibly returning a new message'''
            self.buf.extend(c)

            self.total_bytes_received += len(c)

            if self.native:
                if native_testing:
                    self.test_buf.extend(c)
                    m = self.__parse_char_native(self.test_buf)
                    m2 = self.__parse_char_legacy()
                    if m2 != m:
                        print("Native: %s\nLegacy: %s\n" % (m, m2))
                        raise Exception('Native vs. Legacy mismatch')
                else:
                    m = self.__parse_char_native(self.buf)
            else:
                m = self.__parse_char_legacy()

            if m is not None:
                self.total_packets_received += 1
                self.__callbacks(m)
            else:
                # XXX The idea here is if we've read something and there's nothing left in
                # the buffer, reset it to 0 which frees the memory
                if self.buf_len() == 0 and self.buf_index != 0:
                    self.buf = bytearray()
                    self.buf_index = 0

            return m

        def __parse_char_legacy(self):
            '''input some data bytes, possibly returning a new message (uses no native code)'''
            header_len = HEADER_LEN_V1
            if self.buf_len() >= 1 and self.buf[self.buf_index] == PROTOCOL_MARKER_V2:
                header_len = HEADER_LEN_V2

            if self.buf_len() >= 1 and self.buf[self.buf_index] != PROTOCOL_MARKER_V1 and self.buf[self.buf_index] != PROTOCOL_MARKER_V2:
                magic = self.buf[self.buf_index]
                self.buf_index += 1
                if self.robust_parsing:
                    m = MAVLink_bad_data(bytearray([magic]), 'Bad prefix')
                    self.expected_length = header_len+2
                    self.total_receive_errors += 1
                    return m
                if self.have_prefix_error:
                    return None
                self.have_prefix_error = True
                self.total_receive_errors += 1
                raise MAVError("invalid MAVLink prefix '%s'" % magic)
            self.have_prefix_error = False
            if self.buf_len() >= 3:
                sbuf = self.buf[self.buf_index:3+self.buf_index]
                if sys.version_info.major < 3:
                    sbuf = str(sbuf)
                (magic, self.expected_length, incompat_flags) = self.mav20_h3_unpacker.unpack(sbuf)
                if magic == PROTOCOL_MARKER_V2 and (incompat_flags & MAVLINK_IFLAG_SIGNED):
                        self.expected_length += MAVLINK_SIGNATURE_BLOCK_LEN
                self.expected_length += header_len + 2
            if self.expected_length >= (header_len+2) and self.buf_len() >= self.expected_length:
                mbuf = array.array('B', self.buf[self.buf_index:self.buf_index+self.expected_length])
                self.buf_index += self.expected_length
                self.expected_length = header_len+2
                if self.robust_parsing:
                    try:
                        if magic == PROTOCOL_MARKER_V2 and (incompat_flags & ~MAVLINK_IFLAG_SIGNED) != 0:
                            raise MAVError('invalid incompat_flags 0x%x 0x%x %u' % (incompat_flags, magic, self.expected_length))
                        m = self.decode(mbuf)
                    except MAVError as reason:
                        m = MAVLink_bad_data(mbuf, reason.message)
                        self.total_receive_errors += 1
                else:
                    if magic == PROTOCOL_MARKER_V2 and (incompat_flags & ~MAVLINK_IFLAG_SIGNED) != 0:
                        raise MAVError('invalid incompat_flags 0x%x 0x%x %u' % (incompat_flags, magic, self.expected_length))
                    m = self.decode(mbuf)
                return m
            return None

        def parse_buffer(self, s):
            '''input some data bytes, possibly returning a list of new messages'''
            m = self.parse_char(s)
            if m is None:
                return None
            ret = [m]
            while True:
                m = self.parse_char("")
                if m is None:
                    return ret
                ret.append(m)
            return ret

        def check_signature(self, msgbuf, srcSystem, srcComponent):
            '''check signature on incoming message'''
            if isinstance(msgbuf, array.array):
                msgbuf = msgbuf.tostring()
            timestamp_buf = msgbuf[-12:-6]
            link_id = msgbuf[-13]
            (tlow, thigh) = self.mav_sign_unpacker.unpack(timestamp_buf)
            timestamp = tlow + (thigh<<32)

            # see if the timestamp is acceptable
            stream_key = (link_id,srcSystem,srcComponent)
            if stream_key in self.signing.stream_timestamps:
                if timestamp <= self.signing.stream_timestamps[stream_key]:
                    # reject old timestamp
                    # print('old timestamp')
                    return False
            else:
                # a new stream has appeared. Accept the timestamp if it is at most
                # one minute behind our current timestamp
                if timestamp + 6000*1000 < self.signing.timestamp:
                    # print('bad new stream ', timestamp/(100.0*1000*60*60*24*365), self.signing.timestamp/(100.0*1000*60*60*24*365))
                    return False
                self.signing.stream_timestamps[stream_key] = timestamp
                # print('new stream')

            h = hashlib.new('sha256')
            h.update(self.signing.secret_key)
            h.update(msgbuf[:-6])
            if str(type(msgbuf)) == "<class 'bytes'>":
                # Python 3
                sig1 = h.digest()[:6]
                sig2 = msgbuf[-6:]
            else:
                sig1 = str(h.digest())[:6]
                sig2 = str(msgbuf)[-6:]
            if sig1 != sig2:
                # print('sig mismatch')
                return False

            # the timestamp we next send with is the max of the received timestamp and
            # our current timestamp
            self.signing.timestamp = max(self.signing.timestamp, timestamp)
            return True

        def decode(self, msgbuf):
                '''decode a buffer as a MAVLink message'''
                # decode the header
                if msgbuf[0] != PROTOCOL_MARKER_V1:
                    headerlen = 10
                    try:
                        magic, mlen, incompat_flags, compat_flags, seq, srcSystem, srcComponent, msgIdlow, msgIdhigh = self.mav20_unpacker.unpack(msgbuf[:headerlen])
                    except struct.error as emsg:
                        raise MAVError('Unable to unpack MAVLink header: %s' % emsg)
                    msgId = msgIdlow | (msgIdhigh<<16)
                    mapkey = msgId
                else:
                    headerlen = 6
                    try:
                        magic, mlen, seq, srcSystem, srcComponent, msgId = self.mav10_unpacker.unpack(msgbuf[:headerlen])
                        incompat_flags = 0
                        compat_flags = 0
                    except struct.error as emsg:
                        raise MAVError('Unable to unpack MAVLink header: %s' % emsg)
                    mapkey = msgId
                if (incompat_flags & MAVLINK_IFLAG_SIGNED) != 0:
                    signature_len = MAVLINK_SIGNATURE_BLOCK_LEN
                else:
                    signature_len = 0

                if ord(magic) != PROTOCOL_MARKER_V1 and ord(magic) != PROTOCOL_MARKER_V2:
                    raise MAVError("invalid MAVLink prefix '%s'" % magic)
                if mlen != len(msgbuf)-(headerlen+2+signature_len):
                    raise MAVError('invalid MAVLink message length. Got %u expected %u, msgId=%u headerlen=%u' % (len(msgbuf)-(headerlen+2+signature_len), mlen, msgId, headerlen))

                if not mapkey in mavlink_map:
                    raise MAVError('unknown MAVLink message ID %s' % str(mapkey))

                # decode the payload
                type = mavlink_map[mapkey]
                fmt = type.format
                order_map = type.orders
                len_map = type.lengths
                crc_extra = type.crc_extra

                # decode the checksum
                try:
                    crc, = self.mav_csum_unpacker.unpack(msgbuf[-(2+signature_len):][:2])
                except struct.error as emsg:
                    raise MAVError('Unable to unpack MAVLink CRC: %s' % emsg)
                crcbuf = msgbuf[1:-(2+signature_len)]
                if True: # using CRC extra
                    crcbuf.append(crc_extra)
                crc2 = x25crc(crcbuf)
                if crc != crc2.crc:
                    raise MAVError('invalid MAVLink CRC in msgID %u 0x%04x should be 0x%04x' % (msgId, crc, crc2.crc))

                sig_ok = False
                if signature_len == MAVLINK_SIGNATURE_BLOCK_LEN:
                    self.signing.sig_count += 1
                if self.signing.secret_key is not None:
                    accept_signature = False
                    if signature_len == MAVLINK_SIGNATURE_BLOCK_LEN:
                        sig_ok = self.check_signature(msgbuf, srcSystem, srcComponent)
                        accept_signature = sig_ok
                        if sig_ok:
                            self.signing.goodsig_count += 1
                        else:
                            self.signing.badsig_count += 1
                        if not accept_signature and self.signing.allow_unsigned_callback is not None:
                            accept_signature = self.signing.allow_unsigned_callback(self, msgId)
                            if accept_signature:
                                self.signing.unsigned_count += 1
                            else:
                                self.signing.reject_count += 1
                    elif self.signing.allow_unsigned_callback is not None:
                        accept_signature = self.signing.allow_unsigned_callback(self, msgId)
                        if accept_signature:
                            self.signing.unsigned_count += 1
                        else:
                            self.signing.reject_count += 1
                    if not accept_signature:
                        raise MAVError('Invalid signature')

                csize = type.unpacker.size
                mbuf = msgbuf[headerlen:-(2+signature_len)]
                if len(mbuf) < csize:
                    # zero pad to give right size
                    mbuf.extend([0]*(csize - len(mbuf)))
                if len(mbuf) < csize:
                    raise MAVError('Bad message of type %s length %u needs %s' % (
                        type, len(mbuf), csize))
                mbuf = mbuf[:csize]
                try:
                    t = type.unpacker.unpack(mbuf)
                except struct.error as emsg:
                    raise MAVError('Unable to unpack MAVLink payload type=%s fmt=%s payloadLength=%u: %s' % (
                        type, fmt, len(mbuf), emsg))

                tlist = list(t)
                # handle sorted fields
                if True:
                    t = tlist[:]
                    if sum(len_map) == len(len_map):
                        # message has no arrays in it
                        for i in range(0, len(tlist)):
                            tlist[i] = t[order_map[i]]
                    else:
                        # message has some arrays
                        tlist = []
                        for i in range(0, len(order_map)):
                            order = order_map[i]
                            L = len_map[order]
                            tip = sum(len_map[:order])
                            field = t[tip]
                            if L == 1 or isinstance(field, str):
                                tlist.append(field)
                            else:
                                tlist.append(t[tip:(tip + L)])

                # terminate any strings
                for i in range(0, len(tlist)):
                    if type.fieldtypes[i] == 'char':
                        if sys.version_info.major >= 3:
                            tlist[i] = tlist[i].decode('utf-8')
                        tlist[i] = str(MAVString(tlist[i]))
                t = tuple(tlist)
                # construct the message object
                try:
                    m = type(*t)
                except Exception as emsg:
                    raise MAVError('Unable to instantiate MAVLink message of type %s : %s' % (type, emsg))
                m._signed = sig_ok
                if m._signed:
                    m._link_id = msgbuf[-13]
                m._msgbuf = msgbuf
                m._payload = msgbuf[6:-(2+signature_len)]
                m._crc = crc
                m._header = MAVLink_header(msgId, incompat_flags, compat_flags, mlen, seq, srcSystem, srcComponent)
                return m
        def swoop_arming_flags_encode(self, armingCheckStatus, armingCheckFlags1, armingCheckFlags2, armingCheckFlags3):
                '''
                Periodic ARMING status Flag Packet

                armingCheckStatus         : 0 if all arming checks have passed, false otherwise (type:uint8_t, values:SWOOP_ARMING_CHECKS_PASSED)
                armingCheckFlags1         : Flag bits to indicate which of the arming checks is failing (type:uint16_t, values:SWOOP_ARMING_CHECK_DETAIL_1)
                armingCheckFlags2         : Flag bits to indicate which of the arming checks is failing (type:uint16_t, values:SWOOP_ARMING_CHECK_DETAIL_2)
                armingCheckFlags3         : Flag bits to indicate which of the arming checks is failing (type:uint16_t, values:SWOOP_ARMING_CHECK_COMMON)

                '''
                return MAVLink_swoop_arming_flags_message(armingCheckStatus, armingCheckFlags1, armingCheckFlags2, armingCheckFlags3)

        def swoop_arming_flags_send(self, armingCheckStatus, armingCheckFlags1, armingCheckFlags2, armingCheckFlags3, force_mavlink1=False):
                '''
                Periodic ARMING status Flag Packet

                armingCheckStatus         : 0 if all arming checks have passed, false otherwise (type:uint8_t, values:SWOOP_ARMING_CHECKS_PASSED)
                armingCheckFlags1         : Flag bits to indicate which of the arming checks is failing (type:uint16_t, values:SWOOP_ARMING_CHECK_DETAIL_1)
                armingCheckFlags2         : Flag bits to indicate which of the arming checks is failing (type:uint16_t, values:SWOOP_ARMING_CHECK_DETAIL_2)
                armingCheckFlags3         : Flag bits to indicate which of the arming checks is failing (type:uint16_t, values:SWOOP_ARMING_CHECK_COMMON)

                '''
                return self.send(self.swoop_arming_flags_encode(armingCheckStatus, armingCheckFlags1, armingCheckFlags2, armingCheckFlags3), force_mavlink1=force_mavlink1)

        def swoop_inflight_flags_instant_encode(self, inflightFlags, maximumIntensity, hoverAssistIntensity, emergencyLandIntensity, gpsIntensity, vibrationIntensity, hoverMotorIntensity, forwardMotorIntensity, lidarIntensity, hoverBatteryIntensity, forwardBatteryIntensity, altitudeIntensity, windIntensity, hoverAttitudeIntensity, landingIntensity, aerodynamicIntensity, airspeedIntensity, servoIntensity, hoverAssistDetail, emergencyLandDetail, gpsDetail, vibrationDetail, hoverMotorDetail, forwardMotorDetail, lidarDetail, hoverBatteryDetail, forwardBatteryDetail, altitudeDetail, windDetail, hoverAttitudeDetail, landingDetail, aerodynamicDetail, airspeedDetail, servoDetail):
                '''
                Periodic INFLIGHT Flag Packet

                inflightFlags             : Status bits to show overall summary of inflight status issues (type:uint16_t, values:SWOOP_INFLIGHT_FLAGS)
                maximumIntensity          : Flag bits to indicate how bad the worst issue is (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                hoverAssistIntensity        : Flag bits to indicate intensity of Hover Assist issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                emergencyLandIntensity        : Flag bits to indicate intensity of Emergency Land issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                gpsIntensity              : Flag bits to indicate intensity of GPS issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                vibrationIntensity        : Flag bits to indicate intensity of Vibration issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                hoverMotorIntensity        : Flag bits to indicate intensity of Hover Motor issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                forwardMotorIntensity        : Flag bits to indicate intensity of Forward Motor issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                lidarIntensity            : Flag bits to indicate intensity of Lidar issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                hoverBatteryIntensity        : Flag bits to indicate intensity of Hover Battery issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                forwardBatteryIntensity        : Flag bits to indicate intensity of Forward Battery issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                altitudeIntensity         : Flag bits to indicate intensity of Altitude hold issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                windIntensity             : Flag bits to indicate intensity of Wind Strength issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                hoverAttitudeIntensity        : Flag bits to indicate intensity of Hover Attitude issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                landingIntensity          : Flag bits to indicate intensity of Landing issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                aerodynamicIntensity        : Flag bits to indicate intensity of aerodymanic issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                airspeedIntensity         : Flag bits to indicate intensity of Airspeed issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                servoIntensity            : Flag bits to indicate intensity of Servo issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                hoverAssistDetail         : Flag bits to indicate detail of Hover Assist issues (type:uint8_t, values:SWOOP_HOVER_ASSIST_DETAIL)
                emergencyLandDetail        : Flag bits to indicate detail of Emergency Land issues (type:uint8_t, values:SWOOP_EMERGENCY_LAND_DETAIL)
                gpsDetail                 : Flag bits to indicate detail of GPS issues (type:uint8_t, values:SWOOP_GPS_HEALTH_DETAIL)
                vibrationDetail           : Flag bits to indicate detail of Vibration issues (type:uint8_t, values:SWOOP_NO_DETAIL)
                hoverMotorDetail          : Flag bits to indicate detail of Hover Motor issues (type:uint8_t, values:SWOOP_HOVER_MOTOR_FAIL_DETAIL)
                forwardMotorDetail        : Flag bits to indicate detail of Forward Motor issues (type:uint8_t, values:SWOOP_FORWARD_MOTOR_FAIL_DETAIL)
                lidarDetail               : Flag bits to indicate detail of Lidar issues (type:uint8_t, values:LIDAR_DETAIL)
                hoverBatteryDetail        : Flag bits to indicate detail of Hover Battery issues (type:uint8_t, values:FORWARD_BATTERY_DETAIL)
                forwardBatteryDetail        : Flag bits to indicate detail of Forward Battery issues (type:uint8_t, values:HOVER_BATTERY_DETAIL)
                altitudeDetail            : Flag bits to indicate detail of Altitude hold issues (type:uint8_t, values:ALTITTUDE_DETAIL)
                windDetail                : Flag bits to indicate detail of Wind Strength issues (type:uint8_t, values:SWOOP_NO_DETAIL)
                hoverAttitudeDetail        : Flag bits to indicate detail of Hover Attitude issues (type:uint8_t, values:SWOOP_NO_DETAIL)
                landingDetail             : Flag bits to indicate detail of Landing issues (type:uint8_t, values:LANDING_DETAIL)
                aerodynamicDetail         : Flag bits to indicate detail of aerodymanic issues (type:uint8_t, values:AERODYNAMIC_DETAIL)
                airspeedDetail            : Flag bits to indicate detail of Airspeed issues (type:uint8_t, values:AIRSPEED_DETAIL)
                servoDetail               : Flag bits to indicate detail of Servo issues (type:uint8_t, values:SERVO_DETAIL)

                '''
                return MAVLink_swoop_inflight_flags_instant_message(inflightFlags, maximumIntensity, hoverAssistIntensity, emergencyLandIntensity, gpsIntensity, vibrationIntensity, hoverMotorIntensity, forwardMotorIntensity, lidarIntensity, hoverBatteryIntensity, forwardBatteryIntensity, altitudeIntensity, windIntensity, hoverAttitudeIntensity, landingIntensity, aerodynamicIntensity, airspeedIntensity, servoIntensity, hoverAssistDetail, emergencyLandDetail, gpsDetail, vibrationDetail, hoverMotorDetail, forwardMotorDetail, lidarDetail, hoverBatteryDetail, forwardBatteryDetail, altitudeDetail, windDetail, hoverAttitudeDetail, landingDetail, aerodynamicDetail, airspeedDetail, servoDetail)

        def swoop_inflight_flags_instant_send(self, inflightFlags, maximumIntensity, hoverAssistIntensity, emergencyLandIntensity, gpsIntensity, vibrationIntensity, hoverMotorIntensity, forwardMotorIntensity, lidarIntensity, hoverBatteryIntensity, forwardBatteryIntensity, altitudeIntensity, windIntensity, hoverAttitudeIntensity, landingIntensity, aerodynamicIntensity, airspeedIntensity, servoIntensity, hoverAssistDetail, emergencyLandDetail, gpsDetail, vibrationDetail, hoverMotorDetail, forwardMotorDetail, lidarDetail, hoverBatteryDetail, forwardBatteryDetail, altitudeDetail, windDetail, hoverAttitudeDetail, landingDetail, aerodynamicDetail, airspeedDetail, servoDetail, force_mavlink1=False):
                '''
                Periodic INFLIGHT Flag Packet

                inflightFlags             : Status bits to show overall summary of inflight status issues (type:uint16_t, values:SWOOP_INFLIGHT_FLAGS)
                maximumIntensity          : Flag bits to indicate how bad the worst issue is (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                hoverAssistIntensity        : Flag bits to indicate intensity of Hover Assist issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                emergencyLandIntensity        : Flag bits to indicate intensity of Emergency Land issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                gpsIntensity              : Flag bits to indicate intensity of GPS issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                vibrationIntensity        : Flag bits to indicate intensity of Vibration issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                hoverMotorIntensity        : Flag bits to indicate intensity of Hover Motor issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                forwardMotorIntensity        : Flag bits to indicate intensity of Forward Motor issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                lidarIntensity            : Flag bits to indicate intensity of Lidar issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                hoverBatteryIntensity        : Flag bits to indicate intensity of Hover Battery issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                forwardBatteryIntensity        : Flag bits to indicate intensity of Forward Battery issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                altitudeIntensity         : Flag bits to indicate intensity of Altitude hold issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                windIntensity             : Flag bits to indicate intensity of Wind Strength issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                hoverAttitudeIntensity        : Flag bits to indicate intensity of Hover Attitude issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                landingIntensity          : Flag bits to indicate intensity of Landing issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                aerodynamicIntensity        : Flag bits to indicate intensity of aerodymanic issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                airspeedIntensity         : Flag bits to indicate intensity of Airspeed issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                servoIntensity            : Flag bits to indicate intensity of Servo issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                hoverAssistDetail         : Flag bits to indicate detail of Hover Assist issues (type:uint8_t, values:SWOOP_HOVER_ASSIST_DETAIL)
                emergencyLandDetail        : Flag bits to indicate detail of Emergency Land issues (type:uint8_t, values:SWOOP_EMERGENCY_LAND_DETAIL)
                gpsDetail                 : Flag bits to indicate detail of GPS issues (type:uint8_t, values:SWOOP_GPS_HEALTH_DETAIL)
                vibrationDetail           : Flag bits to indicate detail of Vibration issues (type:uint8_t, values:SWOOP_NO_DETAIL)
                hoverMotorDetail          : Flag bits to indicate detail of Hover Motor issues (type:uint8_t, values:SWOOP_HOVER_MOTOR_FAIL_DETAIL)
                forwardMotorDetail        : Flag bits to indicate detail of Forward Motor issues (type:uint8_t, values:SWOOP_FORWARD_MOTOR_FAIL_DETAIL)
                lidarDetail               : Flag bits to indicate detail of Lidar issues (type:uint8_t, values:LIDAR_DETAIL)
                hoverBatteryDetail        : Flag bits to indicate detail of Hover Battery issues (type:uint8_t, values:FORWARD_BATTERY_DETAIL)
                forwardBatteryDetail        : Flag bits to indicate detail of Forward Battery issues (type:uint8_t, values:HOVER_BATTERY_DETAIL)
                altitudeDetail            : Flag bits to indicate detail of Altitude hold issues (type:uint8_t, values:ALTITTUDE_DETAIL)
                windDetail                : Flag bits to indicate detail of Wind Strength issues (type:uint8_t, values:SWOOP_NO_DETAIL)
                hoverAttitudeDetail        : Flag bits to indicate detail of Hover Attitude issues (type:uint8_t, values:SWOOP_NO_DETAIL)
                landingDetail             : Flag bits to indicate detail of Landing issues (type:uint8_t, values:LANDING_DETAIL)
                aerodynamicDetail         : Flag bits to indicate detail of aerodymanic issues (type:uint8_t, values:AERODYNAMIC_DETAIL)
                airspeedDetail            : Flag bits to indicate detail of Airspeed issues (type:uint8_t, values:AIRSPEED_DETAIL)
                servoDetail               : Flag bits to indicate detail of Servo issues (type:uint8_t, values:SERVO_DETAIL)

                '''
                return self.send(self.swoop_inflight_flags_instant_encode(inflightFlags, maximumIntensity, hoverAssistIntensity, emergencyLandIntensity, gpsIntensity, vibrationIntensity, hoverMotorIntensity, forwardMotorIntensity, lidarIntensity, hoverBatteryIntensity, forwardBatteryIntensity, altitudeIntensity, windIntensity, hoverAttitudeIntensity, landingIntensity, aerodynamicIntensity, airspeedIntensity, servoIntensity, hoverAssistDetail, emergencyLandDetail, gpsDetail, vibrationDetail, hoverMotorDetail, forwardMotorDetail, lidarDetail, hoverBatteryDetail, forwardBatteryDetail, altitudeDetail, windDetail, hoverAttitudeDetail, landingDetail, aerodynamicDetail, airspeedDetail, servoDetail), force_mavlink1=force_mavlink1)

        def swoop_inflight_flags_persistent_encode(self, inflightFlags, maximumIntensity, hoverAssistIntensity, emergencyLandIntensity, gpsIntensity, vibrationIntensity, hoverMotorIntensity, forwardMotorIntensity, lidarIntensity, hoverBatteryIntensity, forwardBatteryIntensity, altitudeIntensity, windIntensity, hoverAttitudeIntensity, landingIntensity, aerodynamicIntensity, airspeedIntensity, servoIntensity, hoverAssistDetail, emergencyLandDetail, gpsDetail, vibrationDetail, hoverMotorDetail, forwardMotorDetail, lidarDetail, hoverBatteryDetail, forwardBatteryDetail, altitudeDetail, windDetail, hoverAttitudeDetail, landingDetail, aerodynamicDetail, airspeedDetail, servoDetail):
                '''
                Periodic Send of persistent inflight status flags - Resets on Arm

                inflightFlags             : Status bits to show overall summary of inflight status issues (type:uint16_t, values:SWOOP_INFLIGHT_FLAGS)
                maximumIntensity          : Flag bits to indicate how bad the worst issue is (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                hoverAssistIntensity        : Flag bits to indicate intensity of Hover Assist issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                emergencyLandIntensity        : Flag bits to indicate intensity of Emergency Land issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                gpsIntensity              : Flag bits to indicate intensity of GPS issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                vibrationIntensity        : Flag bits to indicate intensity of Vibration issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                hoverMotorIntensity        : Flag bits to indicate intensity of Hover Motor issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                forwardMotorIntensity        : Flag bits to indicate intensity of Forward Motor issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                lidarIntensity            : Flag bits to indicate intensity of Lidar issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                hoverBatteryIntensity        : Flag bits to indicate intensity of Hover Battery issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                forwardBatteryIntensity        : Flag bits to indicate intensity of Forward Battery issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                altitudeIntensity         : Flag bits to indicate intensity of Altitude hold issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                windIntensity             : Flag bits to indicate intensity of Wind Strength issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                hoverAttitudeIntensity        : Flag bits to indicate intensity of Hover Attitude issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                landingIntensity          : Flag bits to indicate intensity of Landing issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                aerodynamicIntensity        : Flag bits to indicate intensity of aerodymanic issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                airspeedIntensity         : Flag bits to indicate intensity of Airspeed issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                servoIntensity            : Flag bits to indicate intensity of Servo issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                hoverAssistDetail         : Flag bits to indicate detail of Hover Assist issues (type:uint8_t, values:SWOOP_HOVER_ASSIST_DETAIL)
                emergencyLandDetail        : Flag bits to indicate detail of Emergency Land issues (type:uint8_t, values:SWOOP_EMERGENCY_LAND_DETAIL)
                gpsDetail                 : Flag bits to indicate detail of GPS issues (type:uint8_t, values:SWOOP_GPS_HEALTH_DETAIL)
                vibrationDetail           : Flag bits to indicate detail of Vibration issues (type:uint8_t, values:SWOOP_NO_DETAIL)
                hoverMotorDetail          : Flag bits to indicate detail of Hover Motor issues (type:uint8_t, values:SWOOP_HOVER_MOTOR_FAIL_DETAIL)
                forwardMotorDetail        : Flag bits to indicate detail of Forward Motor issues (type:uint8_t, values:SWOOP_FORWARD_MOTOR_FAIL_DETAIL)
                lidarDetail               : Flag bits to indicate detail of Lidar issues (type:uint8_t, values:LIDAR_DETAIL)
                hoverBatteryDetail        : Flag bits to indicate detail of Hover Battery issues (type:uint8_t, values:FORWARD_BATTERY_DETAIL)
                forwardBatteryDetail        : Flag bits to indicate detail of Forward Battery issues (type:uint8_t, values:HOVER_BATTERY_DETAIL)
                altitudeDetail            : Flag bits to indicate detail of Altitude hold issues (type:uint8_t, values:ALTITTUDE_DETAIL)
                windDetail                : Flag bits to indicate detail of Wind Strength issues (type:uint8_t, values:SWOOP_NO_DETAIL)
                hoverAttitudeDetail        : Flag bits to indicate detail of Hover Attitude issues (type:uint8_t, values:SWOOP_NO_DETAIL)
                landingDetail             : Flag bits to indicate detail of Landing issues (type:uint8_t, values:LANDING_DETAIL)
                aerodynamicDetail         : Flag bits to indicate detail of aerodymanic issues (type:uint8_t, values:AERODYNAMIC_DETAIL)
                airspeedDetail            : Flag bits to indicate detail of Airspeed issues (type:uint8_t, values:AIRSPEED_DETAIL)
                servoDetail               : Flag bits to indicate detail of Servo issues (type:uint8_t, values:SERVO_DETAIL)

                '''
                return MAVLink_swoop_inflight_flags_persistent_message(inflightFlags, maximumIntensity, hoverAssistIntensity, emergencyLandIntensity, gpsIntensity, vibrationIntensity, hoverMotorIntensity, forwardMotorIntensity, lidarIntensity, hoverBatteryIntensity, forwardBatteryIntensity, altitudeIntensity, windIntensity, hoverAttitudeIntensity, landingIntensity, aerodynamicIntensity, airspeedIntensity, servoIntensity, hoverAssistDetail, emergencyLandDetail, gpsDetail, vibrationDetail, hoverMotorDetail, forwardMotorDetail, lidarDetail, hoverBatteryDetail, forwardBatteryDetail, altitudeDetail, windDetail, hoverAttitudeDetail, landingDetail, aerodynamicDetail, airspeedDetail, servoDetail)

        def swoop_inflight_flags_persistent_send(self, inflightFlags, maximumIntensity, hoverAssistIntensity, emergencyLandIntensity, gpsIntensity, vibrationIntensity, hoverMotorIntensity, forwardMotorIntensity, lidarIntensity, hoverBatteryIntensity, forwardBatteryIntensity, altitudeIntensity, windIntensity, hoverAttitudeIntensity, landingIntensity, aerodynamicIntensity, airspeedIntensity, servoIntensity, hoverAssistDetail, emergencyLandDetail, gpsDetail, vibrationDetail, hoverMotorDetail, forwardMotorDetail, lidarDetail, hoverBatteryDetail, forwardBatteryDetail, altitudeDetail, windDetail, hoverAttitudeDetail, landingDetail, aerodynamicDetail, airspeedDetail, servoDetail, force_mavlink1=False):
                '''
                Periodic Send of persistent inflight status flags - Resets on Arm

                inflightFlags             : Status bits to show overall summary of inflight status issues (type:uint16_t, values:SWOOP_INFLIGHT_FLAGS)
                maximumIntensity          : Flag bits to indicate how bad the worst issue is (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                hoverAssistIntensity        : Flag bits to indicate intensity of Hover Assist issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                emergencyLandIntensity        : Flag bits to indicate intensity of Emergency Land issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                gpsIntensity              : Flag bits to indicate intensity of GPS issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                vibrationIntensity        : Flag bits to indicate intensity of Vibration issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                hoverMotorIntensity        : Flag bits to indicate intensity of Hover Motor issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                forwardMotorIntensity        : Flag bits to indicate intensity of Forward Motor issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                lidarIntensity            : Flag bits to indicate intensity of Lidar issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                hoverBatteryIntensity        : Flag bits to indicate intensity of Hover Battery issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                forwardBatteryIntensity        : Flag bits to indicate intensity of Forward Battery issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                altitudeIntensity         : Flag bits to indicate intensity of Altitude hold issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                windIntensity             : Flag bits to indicate intensity of Wind Strength issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                hoverAttitudeIntensity        : Flag bits to indicate intensity of Hover Attitude issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                landingIntensity          : Flag bits to indicate intensity of Landing issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                aerodynamicIntensity        : Flag bits to indicate intensity of aerodymanic issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                airspeedIntensity         : Flag bits to indicate intensity of Airspeed issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                servoIntensity            : Flag bits to indicate intensity of Servo issues (type:uint8_t, values:SWOOP_FLAG_INTENSITY)
                hoverAssistDetail         : Flag bits to indicate detail of Hover Assist issues (type:uint8_t, values:SWOOP_HOVER_ASSIST_DETAIL)
                emergencyLandDetail        : Flag bits to indicate detail of Emergency Land issues (type:uint8_t, values:SWOOP_EMERGENCY_LAND_DETAIL)
                gpsDetail                 : Flag bits to indicate detail of GPS issues (type:uint8_t, values:SWOOP_GPS_HEALTH_DETAIL)
                vibrationDetail           : Flag bits to indicate detail of Vibration issues (type:uint8_t, values:SWOOP_NO_DETAIL)
                hoverMotorDetail          : Flag bits to indicate detail of Hover Motor issues (type:uint8_t, values:SWOOP_HOVER_MOTOR_FAIL_DETAIL)
                forwardMotorDetail        : Flag bits to indicate detail of Forward Motor issues (type:uint8_t, values:SWOOP_FORWARD_MOTOR_FAIL_DETAIL)
                lidarDetail               : Flag bits to indicate detail of Lidar issues (type:uint8_t, values:LIDAR_DETAIL)
                hoverBatteryDetail        : Flag bits to indicate detail of Hover Battery issues (type:uint8_t, values:FORWARD_BATTERY_DETAIL)
                forwardBatteryDetail        : Flag bits to indicate detail of Forward Battery issues (type:uint8_t, values:HOVER_BATTERY_DETAIL)
                altitudeDetail            : Flag bits to indicate detail of Altitude hold issues (type:uint8_t, values:ALTITTUDE_DETAIL)
                windDetail                : Flag bits to indicate detail of Wind Strength issues (type:uint8_t, values:SWOOP_NO_DETAIL)
                hoverAttitudeDetail        : Flag bits to indicate detail of Hover Attitude issues (type:uint8_t, values:SWOOP_NO_DETAIL)
                landingDetail             : Flag bits to indicate detail of Landing issues (type:uint8_t, values:LANDING_DETAIL)
                aerodynamicDetail         : Flag bits to indicate detail of aerodymanic issues (type:uint8_t, values:AERODYNAMIC_DETAIL)
                airspeedDetail            : Flag bits to indicate detail of Airspeed issues (type:uint8_t, values:AIRSPEED_DETAIL)
                servoDetail               : Flag bits to indicate detail of Servo issues (type:uint8_t, values:SERVO_DETAIL)

                '''
                return self.send(self.swoop_inflight_flags_persistent_encode(inflightFlags, maximumIntensity, hoverAssistIntensity, emergencyLandIntensity, gpsIntensity, vibrationIntensity, hoverMotorIntensity, forwardMotorIntensity, lidarIntensity, hoverBatteryIntensity, forwardBatteryIntensity, altitudeIntensity, windIntensity, hoverAttitudeIntensity, landingIntensity, aerodynamicIntensity, airspeedIntensity, servoIntensity, hoverAssistDetail, emergencyLandDetail, gpsDetail, vibrationDetail, hoverMotorDetail, forwardMotorDetail, lidarDetail, hoverBatteryDetail, forwardBatteryDetail, altitudeDetail, windDetail, hoverAttitudeDetail, landingDetail, aerodynamicDetail, airspeedDetail, servoDetail), force_mavlink1=force_mavlink1)

        def swoop_status_encode(self, flightStatus, waypointType, nextWaypointType, waypointJumper):
                '''
                Periodic flight status Flag Packet

                flightStatus              : Enumerated type for flight stage (type:uint8_t, values:SWOOP_STATUS_TYPE)
                waypointType              : Current waypoint type (type:uint16_t)
                nextWaypointType          : Current waypoint type (type:uint16_t)
                waypointJumper            : waypointJumpCountIterator (type:uint16_t)

                '''
                return MAVLink_swoop_status_message(flightStatus, waypointType, nextWaypointType, waypointJumper)

        def swoop_status_send(self, flightStatus, waypointType, nextWaypointType, waypointJumper, force_mavlink1=False):
                '''
                Periodic flight status Flag Packet

                flightStatus              : Enumerated type for flight stage (type:uint8_t, values:SWOOP_STATUS_TYPE)
                waypointType              : Current waypoint type (type:uint16_t)
                nextWaypointType          : Current waypoint type (type:uint16_t)
                waypointJumper            : waypointJumpCountIterator (type:uint16_t)

                '''
                return self.send(self.swoop_status_encode(flightStatus, waypointType, nextWaypointType, waypointJumper), force_mavlink1=force_mavlink1)

        def swoop_energy_encode(self, ForwardEndurance, ForwardHealth, ForwardWHrPortionRemaining, HoverEndurance, HoverHealth, HoverWHrPortionRemaining, ForwardTimeToNextLanding, ForwardTimeToEndOfMission, HoverTimeToNextLanding, HoverTimeToEndOfMission):
                '''
                range remaining data

                ForwardEndurance          : Forward battery endurance remaining [s] (type:uint16_t)
                ForwardHealth             : Forward battery healthy (type:uint8_t)
                ForwardWHrPortionRemaining        : Forward battery percentage left [%] (type:uint8_t)
                HoverEndurance            : Hover battery endurance remaining [s] (type:uint16_t)
                HoverHealth               : Hover battery healthy (type:uint8_t)
                HoverWHrPortionRemaining        : Forward battery percentage left [%] (type:uint8_t)
                ForwardTimeToNextLanding        : Estimated seconds of forward flight required to get to the next landing [s] (type:uint16_t)
                ForwardTimeToEndOfMission        : Estimated seconds of forward flight required to get to the end of the mission [s] (type:uint16_t)
                HoverTimeToNextLanding        : Estimated seconds of hover flight required to get to the next landing [s] (type:uint16_t)
                HoverTimeToEndOfMission        : Estimated seconds of hover flight required to get to the end of the mission [s] (type:uint16_t)

                '''
                return MAVLink_swoop_energy_message(ForwardEndurance, ForwardHealth, ForwardWHrPortionRemaining, HoverEndurance, HoverHealth, HoverWHrPortionRemaining, ForwardTimeToNextLanding, ForwardTimeToEndOfMission, HoverTimeToNextLanding, HoverTimeToEndOfMission)

        def swoop_energy_send(self, ForwardEndurance, ForwardHealth, ForwardWHrPortionRemaining, HoverEndurance, HoverHealth, HoverWHrPortionRemaining, ForwardTimeToNextLanding, ForwardTimeToEndOfMission, HoverTimeToNextLanding, HoverTimeToEndOfMission, force_mavlink1=False):
                '''
                range remaining data

                ForwardEndurance          : Forward battery endurance remaining [s] (type:uint16_t)
                ForwardHealth             : Forward battery healthy (type:uint8_t)
                ForwardWHrPortionRemaining        : Forward battery percentage left [%] (type:uint8_t)
                HoverEndurance            : Hover battery endurance remaining [s] (type:uint16_t)
                HoverHealth               : Hover battery healthy (type:uint8_t)
                HoverWHrPortionRemaining        : Forward battery percentage left [%] (type:uint8_t)
                ForwardTimeToNextLanding        : Estimated seconds of forward flight required to get to the next landing [s] (type:uint16_t)
                ForwardTimeToEndOfMission        : Estimated seconds of forward flight required to get to the end of the mission [s] (type:uint16_t)
                HoverTimeToNextLanding        : Estimated seconds of hover flight required to get to the next landing [s] (type:uint16_t)
                HoverTimeToEndOfMission        : Estimated seconds of hover flight required to get to the end of the mission [s] (type:uint16_t)

                '''
                return self.send(self.swoop_energy_encode(ForwardEndurance, ForwardHealth, ForwardWHrPortionRemaining, HoverEndurance, HoverHealth, HoverWHrPortionRemaining, ForwardTimeToNextLanding, ForwardTimeToEndOfMission, HoverTimeToNextLanding, HoverTimeToEndOfMission), force_mavlink1=force_mavlink1)

